,clone_url,created_at,description,forks_count,full_name,id,language,name,size,stargazers_count,updated_at,topics,license_url
0,https://github.com/Artityagi123456789/15DaysofUVM.git,2024-01-19 18:03:30+00:00,,1,Artityagi123456789/15DaysofUVM,745614718,SystemVerilog,15DaysofUVM,26479,10,2024-02-27 09:40:21+00:00,"['uvm', 'uvm-template', 'uvm-verification', 'uvmapping', 'config', 'db', 'phase', 'tlm-models']",None
1,https://github.com/NoBizz/Iverilog-Motor-control-simulation.git,2024-01-19 14:24:12+00:00,,0,NoBizz/Iverilog-Motor-control-simulation,745525208,SystemVerilog,Iverilog-Motor-control-simulation,4433,4,2024-01-20 00:59:30+00:00,[],None
2,https://github.com/ZiyangYE/LicheeTang25k_SDRAM.git,2023-12-30 04:45:10+00:00,SDRAM controller for LicheeTang25k,2,ZiyangYE/LicheeTang25k_SDRAM,737178291,SystemVerilog,LicheeTang25k_SDRAM,24,3,2024-01-15 18:17:25+00:00,[],https://api.github.com/licenses/apache-2.0
3,https://github.com/arjunabinash/UART_UVM.git,2023-12-27 06:17:14+00:00," UART- Universal Asynchronous Receiver and transmitter is a hardware device which facilitates serial transmission and reception of data. In this work presented here, the UART has been designed with the use of the industry standard Verilog HDL code and the verification of the protocol has been done using system Verilog code in UVM.",0,arjunabinash/UART_UVM,736156621,SystemVerilog,UART_UVM,8,3,2024-03-29 06:51:39+00:00,[],None
4,https://github.com/scalable-arch/DRAMController_2024.git,2024-01-16 12:13:53+00:00,,0,scalable-arch/DRAMController_2024,743990323,SystemVerilog,DRAMController_2024,4355,3,2024-02-10 18:49:01+00:00,[],https://api.github.com/licenses/apache-2.0
5,https://github.com/tmssngr/z8verilog.git,2024-01-23 16:21:36+00:00,Zilog Z8 softcore in verilog,0,tmssngr/z8verilog,747283490,SystemVerilog,z8verilog,744,3,2024-04-12 17:44:42+00:00,"['fpga', 'tang-nano-9k', 'verilog', 'sipeed-tang-nano-9k']",https://api.github.com/licenses/gpl-3.0
6,https://github.com/mbits-mirafra/pulpino__i2c_master__ip_verification.git,2024-01-18 12:18:12+00:00,IP Veriification of I2C master using the I3C VIP,1,mbits-mirafra/pulpino__i2c_master__ip_verification,744988382,SystemVerilog,pulpino__i2c_master__ip_verification,8738,3,2024-02-17 02:09:23+00:00,[],None
7,https://github.com/nkusikevin/System-Verilog.git,2024-01-03 21:55:26+00:00,,0,nkusikevin/System-Verilog,738714850,SystemVerilog,System-Verilog,91,2,2024-01-04 09:36:42+00:00,[],None
8,https://github.com/huy7715/Newyear_Report.git,2023-12-31 20:14:05+00:00,Verification RAM_APB PROTOCOL using systemverilog,0,huy7715/Newyear_Report,737627443,SystemVerilog,Newyear_Report,316,2,2024-01-30 16:22:16+00:00,[],None
9,https://github.com/huy7715/Noel_report.git,2023-12-23 17:57:19+00:00,Verfication Synchronous FIFO using SV without UVM,0,huy7715/Noel_report,735113606,SystemVerilog,Noel_report,49,2,2024-02-21 02:33:04+00:00,[],None
10,https://github.com/Vor-Art/DCD_MultiBankMemory.git,2023-12-18 08:47:56+00:00,"SystemVerilog implementation of a multi-bank memory as part of ""[F23] Digital Circuit Design"" course",0,Vor-Art/DCD_MultiBankMemory,732958280,SystemVerilog,DCD_MultiBankMemory,4581,2,2023-12-18 19:13:12+00:00,"['soc-design', 'systemverilog', 'throughput', 'multibank-memory', 'innopolis-university', 'fpga']",https://api.github.com/licenses/mit
11,https://github.com/arjunabinash/HALFADDER_UVM.git,2023-12-27 06:46:21+00:00,A combinational circuit that adds two single-bit binary numbers and produces the sum and carry as output. ,0,arjunabinash/HALFADDER_UVM,736164673,SystemVerilog,HALFADDER_UVM,6,2,2024-02-05 17:54:12+00:00,[],None
12,https://github.com/StartForKiller/WivCPU.git,2023-12-23 01:41:43+00:00,,0,StartForKiller/WivCPU,734908709,SystemVerilog,WivCPU,109,2,2024-02-05 22:36:06+00:00,[],
13,https://github.com/maxli1997/EECS470.git,2024-01-09 23:57:12+00:00,,0,maxli1997/EECS470,741217862,SystemVerilog,EECS470,24909,1,2024-02-12 02:38:56+00:00,[],None
14,https://github.com/BigPig-Bro/Encoder_BMP.git,2024-01-23 06:35:16+00:00,在FPGA端实现BMP编码,0,BigPig-Bro/Encoder_BMP,747044408,SystemVerilog,Encoder_BMP,92,1,2024-02-04 06:10:47+00:00,[],None
15,https://github.com/mostafa-kermaninia/Basic-Switch-and-Gate-Structures.git,2024-01-06 23:35:16+00:00,Its one of my Uni projects,0,mostafa-kermaninia/Basic-Switch-and-Gate-Structures,739915536,SystemVerilog,Basic-Switch-and-Gate-Structures,99,1,2024-01-06 23:37:21+00:00,[],None
16,https://github.com/Dragon-Git/flexible-indirect-registers-with-uvm.git,2024-01-06 13:45:05+00:00,,0,Dragon-Git/flexible-indirect-registers-with-uvm,739769175,SystemVerilog,flexible-indirect-registers-with-uvm,733,1,2024-01-13 14:11:44+00:00,[],None
17,https://github.com/vietchau0509/-Eight-Bit-Four-Functions-Calculator.git,2024-01-04 19:59:46+00:00,8-Bit Four-Function Calculator,0,vietchau0509/-Eight-Bit-Four-Functions-Calculator,739113796,SystemVerilog,-Eight-Bit-Four-Functions-Calculator,285,1,2024-01-20 00:14:47+00:00,[],None
18,https://github.com/VyshnaviChilukamukku/ROUTER-Verification-UVM-.git,2024-01-20 14:05:05+00:00,The Router is a device that forwards data packets between computer networks( drives data to output channel based on the address field contained in the packet header).,0,VyshnaviChilukamukku/ROUTER-Verification-UVM-,745905607,SystemVerilog,ROUTER-Verification-UVM-,334,1,2024-01-21 13:43:46+00:00,[],None
19,https://github.com/liuguangxi/vlib_arith_unit.git,2023-12-18 06:07:31+00:00,Verilog Library of Arithmetic Units,0,liuguangxi/vlib_arith_unit,732905996,SystemVerilog,vlib_arith_unit,562,1,2024-01-12 04:53:09+00:00,[],https://api.github.com/licenses/mit
20,https://github.com/Jety16/Arquitectura_Del_computador_Famaf.git,2024-01-11 15:23:14+00:00,,0,Jety16/Arquitectura_Del_computador_Famaf,742011734,SystemVerilog,Arquitectura_Del_computador_Famaf,550,1,2024-02-10 01:31:23+00:00,[],None
21,https://github.com/tompacino/oled_rgb.git,2023-12-29 09:36:25+00:00,System Verilog modules for controlling the Digilent PMOD Oled RGB Daughter Board.,0,tompacino/oled_rgb,736929845,SystemVerilog,oled_rgb,154,1,2024-02-28 08:54:41+00:00,[],https://api.github.com/licenses/gpl-3.0
22,https://github.com/teddywhy/uvm_apb.git,2024-01-02 16:02:57+00:00,UVM APB VIP,0,teddywhy/uvm_apb,738178774,SystemVerilog,uvm_apb,22308,1,2024-02-19 02:38:57+00:00,[],None
23,https://github.com/hdlguy/litefury_pcie.git,2024-01-08 19:51:27+00:00,A little project to provide the fpga design for a PCIe board being done in KiCad.,0,hdlguy/litefury_pcie,740658340,SystemVerilog,litefury_pcie,781,1,2024-03-26 14:08:40+00:00,[],https://api.github.com/licenses/mit
24,https://github.com/wickerwaka/nec_core.git,2024-01-17 05:50:15+00:00,,0,wickerwaka/nec_core,744352167,SystemVerilog,nec_core,12115,1,2024-01-23 06:14:32+00:00,[],None
25,https://github.com/mrincognito01/Counters.git,2023-12-16 10:36:43+00:00,,0,mrincognito01/Counters,732335162,SystemVerilog,Counters,1,1,2023-12-16 10:52:11+00:00,[],None
26,https://github.com/iJustLeyxo/Sprout.git,2024-01-15 14:15:44+00:00,,0,iJustLeyxo/Sprout,743570189,SystemVerilog,Sprout,31,1,2024-01-15 14:34:04+00:00,[],https://api.github.com/licenses/gpl-3.0
27,https://github.com/BillyScreezo/DSP-tools.git,2024-01-11 13:26:02+00:00,Various modules for developing DSP systems,0,BillyScreezo/DSP-tools,741961803,SystemVerilog,DSP-tools,26,1,2024-01-21 10:11:10+00:00,[],https://api.github.com/licenses/gpl-3.0
28,https://github.com/04amrita/100codesOfsystemVerilog.git,2023-12-20 14:21:16+00:00,Writing 100 different codes on System Verilog and documenting those here.,0,04amrita/100codesOfsystemVerilog,733957610,SystemVerilog,100codesOfsystemVerilog,2,1,2024-02-15 15:08:18+00:00,[],None
29,https://github.com/BillyScreezo/Peripherals.git,2024-01-11 14:57:15+00:00,Various peripheral modules for embedded systems,0,BillyScreezo/Peripherals,742000698,SystemVerilog,Peripherals,33,1,2024-02-24 18:37:31+00:00,[],https://api.github.com/licenses/gpl-3.0
30,https://github.com/OmniaMohamed12/FIFO-Verification-using-SystemVerilog.git,2024-01-22 17:39:41+00:00,Verification of Synchronous_FIFO using system verilog,0,OmniaMohamed12/FIFO-Verification-using-SystemVerilog,746798676,SystemVerilog,FIFO-Verification-using-SystemVerilog,162,1,2024-03-05 08:04:28+00:00,[],None
31,https://github.com/wptaylor/RV32I_piped.git,2024-01-04 04:09:50+00:00,WIP pipelined implementation of the RISC-V RV32I instruction set architecture.,0,wptaylor/RV32I_piped,738795378,SystemVerilog,RV32I_piped,9450,1,2024-01-21 08:14:22+00:00,[],None
32,https://github.com/HPC-SDC/PEA.git,2023-12-26 02:50:44+00:00,,0,HPC-SDC/PEA,735766610,SystemVerilog,PEA,34,1,2024-02-02 07:00:37+00:00,[],None
33,https://github.com/TnnsBeast/HSM.git,2023-12-17 05:51:49+00:00,FPGA Implementation of an HSM,0,TnnsBeast/HSM,732573052,SystemVerilog,HSM,15,1,2023-12-19 06:43:43+00:00,[],None
34,https://github.com/argrabowski/fpga-light-sensor.git,2023-12-30 10:36:46+00:00,,0,argrabowski/fpga-light-sensor,737247642,SystemVerilog,fpga-light-sensor,1881,1,2023-12-30 10:51:10+00:00,[],None
35,https://github.com/meeeeet/VIP-AHBLite-APB-Bridge.git,2024-01-05 17:07:55+00:00,,0,meeeeet/VIP-AHBLite-APB-Bridge,739481121,SystemVerilog,VIP-AHBLite-APB-Bridge,14,1,2024-03-05 03:58:48+00:00,[],None
36,https://github.com/manmohanverma1234/project.git,2023-12-21 22:53:44+00:00,,0,manmohanverma1234/project,734523462,SystemVerilog,project,7,1,2024-01-10 22:09:28+00:00,[],None
37,https://github.com/mahmedadawy2013/UVM_UART.git,2024-01-09 10:41:26+00:00,,0,mahmedadawy2013/UVM_UART,740919401,SystemVerilog,UVM_UART,466,1,2024-02-05 04:02:57+00:00,[],None
38,https://github.com/mahmedadawy2013/UVM_Counter.git,2024-01-06 00:33:04+00:00,,0,mahmedadawy2013/UVM_Counter,739594823,SystemVerilog,UVM_Counter,333,1,2024-02-05 09:51:50+00:00,[],None
39,https://github.com/Dragon-Git/uvm_syoscb.git,2024-01-07 09:43:52+00:00,,0,Dragon-Git/uvm_syoscb,740025582,SystemVerilog,uvm_syoscb,10929,1,2024-03-11 14:11:06+00:00,"['scoreboard', 'uvm', 'verification']",https://api.github.com/licenses/apache-2.0
40,https://github.com/oskarwires/sdram_controller.git,2024-01-03 18:40:06+00:00,High-Speed SystemVerilog SDRAM Controller,0,oskarwires/sdram_controller,738661015,SystemVerilog,sdram_controller,155,1,2024-02-04 17:12:50+00:00,"['sdram', 'sdram-controller', 'fpga']",https://api.github.com/licenses/agpl-3.0
41,https://github.com/tclin0122/GNSS_Layer_1-2.git,2024-01-01 23:46:09+00:00,,0,tclin0122/GNSS_Layer_1-2,737911061,SystemVerilog,GNSS_Layer_1-2,3,1,2024-01-01 23:54:36+00:00,[],None
42,https://github.com/MarcoMassetti/radix-8-modified-booth-encoding-multiplier.git,2024-01-05 09:45:16+00:00,,0,MarcoMassetti/radix-8-modified-booth-encoding-multiplier,739324411,SystemVerilog,radix-8-modified-booth-encoding-multiplier,1841,1,2024-01-05 10:42:32+00:00,[],https://api.github.com/licenses/gpl-3.0
43,https://github.com/oskarwires/uart2.git,2023-12-16 19:15:03+00:00,SystemVerilog UART transciever,0,oskarwires/uart2,732467790,SystemVerilog,uart2,93,1,2024-02-04 17:12:40+00:00,"['systemverilog', 'uart-receiver', 'uart-transmitter', 'fpga']",https://api.github.com/licenses/gpl-3.0
44,https://github.com/sharathat45/nuwanda.git,2024-01-24 21:36:51+00:00,for learning and revising,0,sharathat45/nuwanda,747902432,SystemVerilog,nuwanda,24,1,2024-01-30 16:30:46+00:00,[],None
45,https://github.com/Pietro4F/RISC-V-lite.git,2024-01-05 10:31:47+00:00,RISC-V lite,0,Pietro4F/RISC-V-lite,739340752,SystemVerilog,RISC-V-lite,1440,1,2024-01-05 10:34:53+00:00,[],https://api.github.com/licenses/gpl-3.0
46,https://github.com/Dragon-Git/cdns_interface_registry.git,2024-01-06 13:32:16+00:00,,0,Dragon-Git/cdns_interface_registry,739765454,SystemVerilog,cdns_interface_registry,642,1,2024-01-13 14:11:30+00:00,[],None
47,https://github.com/tom-urkin/Round-Robin.git,2024-01-16 09:09:03+00:00,This repository contains a SystemVerilog implementation of a parametrized Round Robin arbiter with three instantiation options,0,tom-urkin/Round-Robin,743917781,SystemVerilog,Round-Robin,3541,1,2024-04-10 02:44:32+00:00,[],None
48,https://github.com/MrWonder323/Digital-Design-Exercises.git,2023-12-29 14:11:19+00:00,Exercises done from the book : Vaibbhav Taraate - Digital Design Techniques and Exercises_ A Practice Book for Digital Logic Design-Springer (2021),0,MrWonder323/Digital-Design-Exercises,737004351,SystemVerilog,Digital-Design-Exercises,4,1,2024-01-08 11:38:19+00:00,[],None
49,https://github.com/RakshithaRShettigar/AXI_verification.git,2024-01-16 07:24:34+00:00,,4,RakshithaRShettigar/AXI_verification,743879912,SystemVerilog,AXI_verification,26359,1,2024-01-22 04:23:18+00:00,[],None
50,https://github.com/MyWurger/4.1.-OCP-PIO-timer.git,2024-01-25 21:21:34+00:00,,0,MyWurger/4.1.-OCP-PIO-timer,748384558,SystemVerilog,4.1.-OCP-PIO-timer,9,1,2024-01-26 10:29:48+00:00,[],None
51,https://github.com/mostafa-kermaninia/Serial-transmitter-circuit-with-sequence-detector.git,2024-01-11 12:20:04+00:00,I build it with verilog description and quartus simulation,0,mostafa-kermaninia/Serial-transmitter-circuit-with-sequence-detector,741935490,SystemVerilog,Serial-transmitter-circuit-with-sequence-detector,11653,1,2024-01-11 12:30:59+00:00,[],None
52,https://github.com/Bubi2001/rtl_utils.git,2023-12-28 23:34:57+00:00,Common RTL utils,0,Bubi2001/rtl_utils,736804400,SystemVerilog,rtl_utils,105,1,2024-02-05 10:33:04+00:00,[],https://api.github.com/licenses/mit
53,https://github.com/MeanPaper/Pipeline-RV32i-Processor.git,2023-12-17 19:14:35+00:00,A Pipelined Implementation of the RV32I Processor,0,MeanPaper/Pipeline-RV32i-Processor,732770502,SystemVerilog,Pipeline-RV32i-Processor,5279,1,2024-02-11 04:07:37+00:00,"['systemverilog', 'riscv']",https://api.github.com/licenses/gpl-3.0
54,https://github.com/yizhou82/ARM32CPU.git,2023-12-31 02:22:58+00:00,,1,yizhou82/ARM32CPU,737431937,SystemVerilog,ARM32CPU,1499,1,2024-01-13 22:45:47+00:00,[],None
55,https://github.com/dolce-project/gelato.git,2023-12-25 17:28:28+00:00,Gelato: General-purpose Lightweight GPU supporting RISC-V ISA with SIMT extension,0,dolce-project/gelato,735651527,SystemVerilog,gelato,130,1,2024-04-02 02:59:28+00:00,[],https://api.github.com/licenses/mit
56,https://github.com/kapi36/Verification-of-RAM-using-System-Verilog-.git,2024-01-20 04:43:14+00:00,,0,kapi36/Verification-of-RAM-using-System-Verilog-,745768156,SystemVerilog,Verification-of-RAM-using-System-Verilog-,10,1,2024-02-24 14:27:11+00:00,[],None
57,https://github.com/SumaiyaTariqueLabiba/VeriRISC-CPU.git,2024-01-03 14:05:13+00:00,This project was developed based on the labs for Cadence certification on SystemVerilog for Design and Verification V21.10,0,SumaiyaTariqueLabiba/VeriRISC-CPU,738559684,SystemVerilog,VeriRISC-CPU,12,1,2024-03-16 07:33:25+00:00,"['cadence', 'cpu', 'systemverilog', 'veririsc']",None
58,https://github.com/holyuming/vitis-rtl-kernel.git,2024-01-24 11:58:04+00:00,,1,holyuming/vitis-rtl-kernel,747666069,SystemVerilog,vitis-rtl-kernel,27883,1,2024-01-25 07:13:59+00:00,[],None
59,https://github.com/ODraa/Elaborato_Architettura.git,2023-12-21 17:23:53+00:00,Laboratorio di Architettura degli Elaboratori (SIS - Verilog Project) A.A. 2023/2024,0,ODraa/Elaborato_Architettura,734439619,SystemVerilog,Elaborato_Architettura,67,1,2023-12-30 16:49:34+00:00,[],None
60,https://github.com/BillyScreezo/RISC-V.git,2024-01-12 14:19:36+00:00,RISC-V RV32IM SoC my own design,0,BillyScreezo/RISC-V,742456485,SystemVerilog,RISC-V,167,1,2024-01-21 10:11:11+00:00,[],https://api.github.com/licenses/gpl-3.0
61,https://github.com/soc-hub-fi/rt-ibex.git,2024-01-16 10:23:35+00:00,Real-time optimized version of Ibex,0,soc-hub-fi/rt-ibex,743947670,SystemVerilog,rt-ibex,39959,1,2024-03-17 18:37:29+00:00,[],https://api.github.com/licenses/apache-2.0
62,https://github.com/Pochepayka/SistemVerilogLaba2.git,2023-12-26 21:24:51+00:00,,0,Pochepayka/SistemVerilogLaba2,736054719,SystemVerilog,SistemVerilogLaba2,19,1,2023-12-26 22:53:05+00:00,[],None
63,https://github.com/Pochepayka/SistemVerilogLaba1.git,2023-12-26 18:31:24+00:00,,0,Pochepayka/SistemVerilogLaba1,736015380,SystemVerilog,SistemVerilogLaba1,29,1,2023-12-26 22:53:04+00:00,[],None
64,https://github.com/argrabowski/fpga-vga-display.git,2023-12-30 10:22:36+00:00,,0,argrabowski/fpga-vga-display,737244791,SystemVerilog,fpga-vga-display,1066,1,2023-12-30 10:51:13+00:00,[],None
65,https://github.com/OYounis/GAP.git,2024-01-05 22:03:47+00:00,A generic agent pattern that can be reused with multiple interfaces/protocols,2,OYounis/GAP,739565697,SystemVerilog,GAP,6,1,2024-01-08 12:54:05+00:00,[],None
66,https://github.com/mostafa-kermaninia/Flip-Flop-generate-and-development.git,2024-01-11 12:09:58+00:00,I started with SR-latch and developed it.,0,mostafa-kermaninia/Flip-Flop-generate-and-development,741931543,SystemVerilog,Flip-Flop-generate-and-development,2977,1,2024-01-11 12:31:02+00:00,[],None
67,https://github.com/mostafa-kermaninia/ALU.git,2024-01-11 12:03:33+00:00,"Design, simulation and synthesis an ALU with verilog and Yosys",0,mostafa-kermaninia/ALU,741929042,SystemVerilog,ALU,9232,1,2024-01-11 12:31:00+00:00,[],None
68,https://github.com/berkayouzhan/8-Bit-Alu.git,2024-01-10 17:26:37+00:00,"Add, Substract, And, Or Opeartions",0,berkayouzhan/8-Bit-Alu,741578901,SystemVerilog,8-Bit-Alu,532,1,2024-01-15 19:18:07+00:00,[],None
69,https://github.com/deepthipsu/Asynch_FIFO_ECE593.git,2024-01-20 01:01:20+00:00,Asynchronous FIFO project with design and unit testing in SV and verification using UVM,0,deepthipsu/Asynch_FIFO_ECE593,745727568,SystemVerilog,Asynch_FIFO_ECE593,16067,1,2024-02-19 23:02:57+00:00,[],None
70,https://github.com/v-deep/verification-environment.git,2024-01-23 16:14:46+00:00,,0,v-deep/verification-environment,747280375,SystemVerilog,verification-environment,4,0,2024-01-23 16:43:35+00:00,[],None
71,https://github.com/v-deep/memory_model.git,2024-01-23 16:44:53+00:00,,0,v-deep/memory_model,747294601,SystemVerilog,memory_model,3,0,2024-01-23 16:46:27+00:00,[],None
72,https://github.com/Vishnutpgit/VLSI---ROUTER-1X3--Design-and-Verification.git,2024-01-10 14:55:22+00:00,"   The router accepts data packets on a single 8-bit  port and routes them to one of the three output channels, channel0, channel1 and channel2.",0,Vishnutpgit/VLSI---ROUTER-1X3--Design-and-Verification,741513927,SystemVerilog,VLSI---ROUTER-1X3--Design-and-Verification,77,0,2024-01-26 07:10:58+00:00,[],None
73,https://github.com/Smruti-2001/Design-and-verify-the-protocol-SPI-Master-and-Slave-using-Systemverilog.git,2024-01-25 11:14:08+00:00,,0,Smruti-2001/Design-and-verify-the-protocol-SPI-Master-and-Slave-using-Systemverilog,748143153,SystemVerilog,Design-and-verify-the-protocol-SPI-Master-and-Slave-using-Systemverilog,9,0,2024-01-25 11:15:39+00:00,[],None
74,https://github.com/Max-Y-Ma/MNIST-Accelerator.git,2024-01-20 19:00:35+00:00,Neural Network Hardware Accelerator for Recognization of MNIST Characters,0,Max-Y-Ma/MNIST-Accelerator,745991707,SystemVerilog,MNIST-Accelerator,16926,0,2024-01-21 22:01:44+00:00,[],https://api.github.com/licenses/gpl-3.0
75,https://github.com/houdonghui1/open-source-secure-IP-library.git,2023-12-29 09:06:18+00:00,This is an open-source hardware secure IP library.,1,houdonghui1/open-source-secure-IP-library,736921350,SystemVerilog,open-source-secure-IP-library,279,0,2023-12-29 09:32:13+00:00,[],None
76,https://github.com/flyingbrids/ImageKernelFilter.git,2023-12-26 05:09:38+00:00,"Explore different 2D kernel and their implementation (direct , transposed, DA..). Explore resource utilization of each filter on Cyclone V FPGA",0,flyingbrids/ImageKernelFilter,735792201,SystemVerilog,ImageKernelFilter,2393,0,2023-12-27 22:02:44+00:00,[],None
77,https://github.com/sathyanarayanat/verification-projects.git,2023-12-27 19:43:13+00:00,This repository contains System Verilog projects,0,sathyanarayanat/verification-projects,736397410,SystemVerilog,verification-projects,412,0,2023-12-27 20:07:01+00:00,[],None
78,https://github.com/rohangowdamr/FIFO_MEMORY.git,2024-01-06 14:41:08+00:00,,1,rohangowdamr/FIFO_MEMORY,739786161,SystemVerilog,FIFO_MEMORY,183,0,2024-01-06 14:42:44+00:00,[],None
79,https://github.com/attar8/Single-port-Ram.git,2023-12-17 09:31:31+00:00,,0,attar8/Single-port-Ram,732616918,SystemVerilog,Single-port-Ram,16,0,2023-12-17 09:34:51+00:00,[],None
80,https://github.com/sigasi/veresta-doc.git,2023-12-19 13:31:19+00:00,Generate Sigasi project documentation in CI,0,sigasi/veresta-doc,733505037,SystemVerilog,veresta-doc,22,0,2023-12-20 13:23:14+00:00,[],None
81,https://github.com/Evap1/Numerical-systems-and-the-structure-of-the-computer.git,2023-12-21 13:34:17+00:00,course GPA - 91,0,Evap1/Numerical-systems-and-the-structure-of-the-computer,734356879,SystemVerilog,Numerical-systems-and-the-structure-of-the-computer,3618,0,2023-12-21 13:35:53+00:00,[],None
82,https://github.com/yarakhalaf/Design_and_UVM_Verification_for_Memory.git,2023-12-22 11:41:22+00:00,,0,yarakhalaf/Design_and_UVM_Verification_for_Memory,734705326,SystemVerilog,Design_and_UVM_Verification_for_Memory,7,0,2023-12-22 11:42:12+00:00,[],None
83,https://github.com/chaoqun-liang/eth-axis.git,2023-12-24 16:44:50+00:00,,0,chaoqun-liang/eth-axis,735365631,SystemVerilog,eth-axis,23028,0,2023-12-24 16:46:23+00:00,[],https://api.github.com/licenses/mit
84,https://github.com/Sloechka/apb_spi.git,2023-12-23 19:43:16+00:00,,0,Sloechka/apb_spi,735135859,SystemVerilog,apb_spi,228,0,2023-12-23 19:43:21+00:00,[],None
85,https://github.com/By41k/Sapr2.git,2023-12-28 08:53:11+00:00,,0,By41k/Sapr2,736566543,SystemVerilog,Sapr2,4,0,2023-12-28 08:54:00+00:00,[],None
86,https://github.com/ashiaotw/RISC-V.git,2023-12-21 03:02:32+00:00,,0,ashiaotw/RISC-V,734165247,SystemVerilog,RISC-V,7,0,2023-12-28 20:47:04+00:00,[],None
87,https://github.com/Isaiah1810/RSSB-CPU-Implementation.git,2023-12-23 22:00:59+00:00,A Systemverilog implementation of the One Instruction ISA using Reverse Subtract Swap if Borrow,0,Isaiah1810/RSSB-CPU-Implementation,735160060,SystemVerilog,RSSB-CPU-Implementation,23,0,2023-12-23 22:01:57+00:00,[],None
88,https://github.com/okenna10/Simon32-64-Encryption.git,2023-12-30 16:15:40+00:00,A fully pipelined encryption module for lightweight applications. Target architecture is an 7nm ASIC,0,okenna10/Simon32-64-Encryption,737324999,SystemVerilog,Simon32-64-Encryption,34,0,2023-12-30 16:17:18+00:00,[],None
89,https://github.com/Anunalla/AHB-MUX-Verif.git,2024-01-06 17:24:09+00:00,UVM verification of manager selection multiplexor of AHB-Lite protocol,0,Anunalla/AHB-MUX-Verif,739833066,SystemVerilog,AHB-MUX-Verif,12,0,2024-01-06 17:25:04+00:00,[],None
90,https://github.com/mahmedadawy2013/CoCotb_AES128_Encryption.git,2024-01-09 10:37:51+00:00,,0,mahmedadawy2013/CoCotb_AES128_Encryption,740918023,SystemVerilog,CoCotb_AES128_Encryption,1495,0,2024-01-09 10:40:59+00:00,[],None
91,https://github.com/ngkhatu/LC3_Verification.git,2024-01-11 20:45:56+00:00,NCSU ASIC Verification Project- Verification of LC3 using System Verilog,0,ngkhatu/LC3_Verification,742136442,SystemVerilog,LC3_Verification,2785,0,2024-01-11 20:47:11+00:00,[],None
92,https://github.com/startiantian/verification_tb.git,2023-12-28 02:41:51+00:00,uvm testbench,0,startiantian/verification_tb,736476888,,verification_tb,177119,0,2023-12-28 02:41:51+00:00,[],None
93,https://github.com/BlueDagger05/Sv_Complete_TB.git,2024-01-12 12:30:17+00:00,,0,BlueDagger05/Sv_Complete_TB,742414829,SystemVerilog,Sv_Complete_TB,23,0,2024-01-12 18:02:28+00:00,[],None
94,https://github.com/Arvind-Kumar-Dv/apb_3_uvm_tb.git,2024-01-17 11:44:44+00:00,apb3 protocol,0,Arvind-Kumar-Dv/apb_3_uvm_tb,744481650,SystemVerilog,apb_3_uvm_tb,6,0,2024-01-17 11:48:06+00:00,[],None
95,https://github.com/Arvind-Kumar-Dv/dff_tb_uvm.git,2024-01-17 11:16:00+00:00,flip flop uvm,0,Arvind-Kumar-Dv/dff_tb_uvm,744470887,SystemVerilog,dff_tb_uvm,4,0,2024-01-17 11:28:31+00:00,[],None
96,https://github.com/NagaSubrahmanyam/git_sample.git,2024-01-18 09:43:24+00:00,,0,NagaSubrahmanyam/git_sample,744928728,SystemVerilog,git_sample,2983,0,2024-01-18 10:41:29+00:00,[],None
97,https://github.com/nikul09/APB_Protocol.git,2024-01-19 11:47:43+00:00,,0,nikul09/APB_Protocol,745464474,SystemVerilog,APB_Protocol,14,0,2024-01-19 11:56:29+00:00,[],None
98,https://github.com/Mew463/ECE-111.git,2024-01-12 17:19:00+00:00,,0,Mew463/ECE-111,742527240,SystemVerilog,ECE-111,12007,0,2024-03-12 00:10:47+00:00,[],None
99,https://github.com/jokerwyt/SpMM.git,2024-01-19 08:32:32+00:00,A hand-made sparse matrix multiplication accelerator in Scala,0,jokerwyt/SpMM,745391570,SystemVerilog,SpMM,52087,0,2024-03-20 02:40:17+00:00,[],None
100,https://github.com/tarush-s/Computer-Architecture.git,2024-01-22 23:33:20+00:00,,0,tarush-s/Computer-Architecture,746930838,SystemVerilog,Computer-Architecture,4077,0,2024-02-16 04:13:08+00:00,[],https://api.github.com/licenses/mit
101,https://github.com/Fliegende-Rehe/fpga_tetris.git,2023-12-19 00:00:56+00:00,,0,Fliegende-Rehe/fpga_tetris,733265708,SystemVerilog,fpga_tetris,33,0,2023-12-19 00:01:16+00:00,[],None
102,https://github.com/roa-jaser/Advance_Digital.git,2024-01-25 17:36:56+00:00,solution for Course Assignment,0,roa-jaser/Advance_Digital,748302445,SystemVerilog,Advance_Digital,3,0,2024-01-25 17:37:37+00:00,[],None
103,https://github.com/ninghaomiao2002/Verilog-Exercises.git,2023-12-25 15:48:07+00:00,This Repository is used for basic Verilog Exercises.,0,ninghaomiao2002/Verilog-Exercises,735627874,SystemVerilog,Verilog-Exercises,2,0,2024-01-25 20:15:44+00:00,[],None
104,https://github.com/MyWurger/4.2.-RAM-Design-and-Simulation.git,2024-01-25 21:28:28+00:00,,0,MyWurger/4.2.-RAM-Design-and-Simulation,748386916,SystemVerilog,4.2.-RAM-Design-and-Simulation,7,0,2024-01-26 10:30:09+00:00,[],None
105,https://github.com/Tan-YiFan/rvcpu.git,2024-01-25 08:14:51+00:00,,0,Tan-YiFan/rvcpu,748075614,SystemVerilog,rvcpu,3241,0,2024-01-25 11:21:52+00:00,[],
106,https://github.com/jona250210/tt05_systemc.git,2024-01-25 21:45:35+00:00,,0,jona250210/tt05_systemc,748392312,SystemVerilog,tt05_systemc,21,0,2024-01-26 15:52:49+00:00,[],https://api.github.com/licenses/apache-2.0
107,https://github.com/PacktPublishing/Mastering-FPGA.git,2024-01-19 08:55:08+00:00,,0,PacktPublishing/Mastering-FPGA,745399504,SystemVerilog,Mastering-FPGA,177,0,2024-02-03 06:35:58+00:00,[],https://api.github.com/licenses/mit
108,https://github.com/Spirithead/Stream-Arbiter.git,2024-01-11 17:38:47+00:00,,0,Spirithead/Stream-Arbiter,742067366,SystemVerilog,Stream-Arbiter,52,0,2024-01-12 05:15:04+00:00,[],None
109,https://github.com/flaviens/icarus-b2.git,2024-01-16 18:18:55+00:00,,0,flaviens/icarus-b2,744154534,SystemVerilog,icarus-b2,2,0,2024-01-16 18:19:16+00:00,[],None
110,https://github.com/Arvind-Kumar-Dv/all_gate_uvm_tb.git,2024-01-17 11:10:04+00:00,uvm_tb_gate,0,Arvind-Kumar-Dv/all_gate_uvm_tb,744468634,SystemVerilog,all_gate_uvm_tb,4,0,2024-01-17 11:14:00+00:00,[],None
111,https://github.com/bryanjangeesingh/Environmental-Noise-Cancellation.git,2024-01-19 07:15:48+00:00,Environmental Noise Cancellation on an FPGA. ,0,bryanjangeesingh/Environmental-Noise-Cancellation,745365916,SystemVerilog,Environmental-Noise-Cancellation,2992,0,2024-01-19 07:20:02+00:00,[],None
112,https://github.com/Shalu2613/AHB2APB-Bridge-IP-Core-Verification.git,2024-01-13 15:42:05+00:00,The AHB to APB bridge is an AHB slave which works as an interface between the high speed AHB and the low performance APB buses.,0,Shalu2613/AHB2APB-Bridge-IP-Core-Verification,742862902,SystemVerilog,AHB2APB-Bridge-IP-Core-Verification,18,0,2024-01-13 15:49:17+00:00,[],None
113,https://github.com/fedejone/3.1.-2.-Quolity-of-Service-QoS-.git,2023-12-19 19:55:16+00:00,,0,fedejone/3.1.-2.-Quolity-of-Service-QoS-,733645840,SystemVerilog,3.1.-2.-Quolity-of-Service-QoS-,401,0,2023-12-19 19:57:54+00:00,[],None
114,https://github.com/theashix/worldshardestgame.git,2024-01-19 22:08:45+00:00,,0,theashix/worldshardestgame,745691487,SystemVerilog,worldshardestgame,26,0,2024-01-19 22:18:42+00:00,[],None
115,https://github.com/Skrollek/Logika-Cyfrowa.git,2024-01-19 15:28:49+00:00,,0,Skrollek/Logika-Cyfrowa,745551837,SystemVerilog,Logika-Cyfrowa,580,0,2024-01-19 15:35:05+00:00,[],None
116,https://github.com/timotheeCloup/ascon128.git,2024-01-17 14:20:40+00:00,Réalisation d'un projet visant à mettre en œuvre une version simplifiée de l'algorithme de chiffrement symétrique ASCON128.,0,timotheeCloup/ascon128,744546368,SystemVerilog,ascon128,1264,0,2024-01-20 17:42:25+00:00,[],None
117,https://github.com/flaviens/cxxrtl-b2.git,2024-01-20 17:31:24+00:00,,0,flaviens/cxxrtl-b2,745967358,SystemVerilog,cxxrtl-b2,2,0,2024-01-20 17:32:46+00:00,[],None
118,https://github.com/AmaanSingh/SHA-256-Bitcoin.git,2023-12-23 11:07:25+00:00,SHA 256 and Bitcoin implementation in System Verilog,0,AmaanSingh/SHA-256-Bitcoin,735014843,SystemVerilog,SHA-256-Bitcoin,6278,0,2023-12-23 11:24:17+00:00,[],None
119,https://github.com/husrev/SHA3-core-UVM.git,2023-12-28 21:12:23+00:00,UVM verification of SHA3 (Keccak) core by Homer Hsing,0,husrev/SHA3-core-UVM,736778272,SystemVerilog,SHA3-core-UVM,11,0,2023-12-28 21:16:03+00:00,[],None
120,https://github.com/Hira-Firdous/3-Stage-Pipeline-Project.git,2023-12-30 13:59:13+00:00,,0,Hira-Firdous/3-Stage-Pipeline-Project,737291898,SystemVerilog,3-Stage-Pipeline-Project,827,0,2023-12-30 14:02:08+00:00,[],None
121,https://github.com/Kader-Khafif/Programmable-Processor.git,2023-12-30 22:54:23+00:00,Implementing six-instruction programmable processor using SystemVerilog.,0,Kader-Khafif/Programmable-Processor,737404397,SystemVerilog,Programmable-Processor,1598,0,2023-12-30 23:10:10+00:00,[],None
122,https://github.com/hicodev-rw/Simulation-sv.git,2024-01-03 16:35:50+00:00,,0,hicodev-rw/Simulation-sv,738617516,SystemVerilog,Simulation-sv,123,0,2024-01-03 16:45:52+00:00,[],https://api.github.com/licenses/mit
123,https://github.com/leonardhamana/altera.git,2024-01-03 18:19:45+00:00,,0,leonardhamana/altera,738654247,SystemVerilog,altera,8,0,2024-01-03 18:27:07+00:00,[],None
124,https://github.com/78dfjl/sv_string.git,2024-01-09 15:45:16+00:00,,0,78dfjl/sv_string,741050686,SystemVerilog,sv_string,6,0,2024-01-09 16:29:24+00:00,[],None
125,https://github.com/StavPinhas/Projects.git,2023-12-30 08:39:12+00:00,,0,StavPinhas/Projects,737223272,SystemVerilog,Projects,22333,0,2024-02-08 14:10:37+00:00,[],None
126,https://github.com/kodeyang284/uvm_practice.git,2024-01-22 08:47:01+00:00,,0,kodeyang284/uvm_practice,746556468,SystemVerilog,uvm_practice,119,0,2024-01-22 09:25:50+00:00,[],None
127,https://github.com/Hamzaweb49/sequentialmultiplier.git,2023-12-28 14:10:37+00:00,16x16 Sequential Multiplier in System Verilog,0,Hamzaweb49/sequentialmultiplier,736661337,SystemVerilog,sequentialmultiplier,1441,0,2024-01-21 10:08:22+00:00,[],None
128,https://github.com/BAJANTRISIVA/-30daysofsystemverilog.git,2023-12-28 07:04:27+00:00,,0,BAJANTRISIVA/-30daysofsystemverilog,736535926,SystemVerilog,-30daysofsystemverilog,55,0,2023-12-28 07:22:15+00:00,[],None
129,https://github.com/juinchuen/Chip-Design-2024.git,2024-01-19 03:12:49+00:00,,0,juinchuen/Chip-Design-2024,745299827,SystemVerilog,Chip-Design-2024,5269,0,2024-02-07 06:17:28+00:00,[],None
130,https://github.com/nvchuyen/Verification_of_I2C_Memory.git,2023-12-18 09:22:03+00:00,,0,nvchuyen/Verification_of_I2C_Memory,732970972,SystemVerilog,Verification_of_I2C_Memory,5380,0,2023-12-18 09:24:35+00:00,[],None
131,https://github.com/ZhengYuhe/NoC_characterization.git,2023-12-18 11:15:05+00:00,,0,ZhengYuhe/NoC_characterization,733012570,SystemVerilog,NoC_characterization,6,0,2023-12-18 12:02:14+00:00,[],None
132,https://github.com/TnnsBeast/AES-128-FPGA-Accelerator.git,2023-12-19 19:38:09+00:00,FPGA hardware accelerator to perform AES-128 encryption ,0,TnnsBeast/AES-128-FPGA-Accelerator,733640551,SystemVerilog,AES-128-FPGA-Accelerator,2565,0,2023-12-19 19:42:27+00:00,[],None
133,https://github.com/jfu4/CPEN-211-Labs.git,2023-12-27 23:51:45+00:00,,0,jfu4/CPEN-211-Labs,736446543,SystemVerilog,CPEN-211-Labs,7,0,2023-12-27 23:58:45+00:00,[],None
134,https://github.com/By41k/Sapr1.git,2023-12-27 19:31:53+00:00,,0,By41k/Sapr1,736394667,SystemVerilog,Sapr1,5,0,2023-12-27 23:33:24+00:00,[],None
135,https://github.com/kp-deepak/projects.git,2023-12-18 15:26:00+00:00,all the projects under this umbrella,0,kp-deepak/projects,733108772,SystemVerilog,projects,5,0,2023-12-18 15:35:32+00:00,[],None
136,https://github.com/Ammara-Noor/three-stage-pipelined-proc-riscv.git,2023-12-30 13:39:15+00:00,,0,Ammara-Noor/three-stage-pipelined-proc-riscv,737287264,SystemVerilog,three-stage-pipelined-proc-riscv,188,0,2023-12-30 13:42:18+00:00,[],None
137,https://github.com/aamirbutt011/CA_Semstr-7.git,2023-12-30 18:02:32+00:00,,0,aamirbutt011/CA_Semstr-7,737350834,SystemVerilog,CA_Semstr-7,301,0,2023-12-30 18:05:59+00:00,[],None
138,https://github.com/AneezaSabirButt/CA_3StagePipelining_2020CE42-Final-Project-.git,2023-12-30 16:08:45+00:00,,0,AneezaSabirButt/CA_3StagePipelining_2020CE42-Final-Project-,737323234,SystemVerilog,CA_3StagePipelining_2020CE42-Final-Project-,501,0,2023-12-30 16:21:40+00:00,[],None
139,https://github.com/TnnsBeast/FPGA-8bit-CPU.git,2023-12-31 02:07:03+00:00,SystemVerilog Implementation of Ben Eater's 8-Bit CPU,0,TnnsBeast/FPGA-8bit-CPU,737429677,SystemVerilog,FPGA-8bit-CPU,2,0,2023-12-31 02:07:08+00:00,[],None
140,https://github.com/kchandrasek4/Audio_Equalizer.git,2024-01-03 23:13:33+00:00,"Design and Synthesis for Bluetooth Audio Equalizer utilizing UART, I2S, SPI, A2D, PDM, low pass filters, DSP FIR Filters, class D amps. Optimization complete.",0,kchandrasek4/Audio_Equalizer,738732036,SystemVerilog,Audio_Equalizer,935,0,2024-01-03 23:15:08+00:00,[],None
141,https://github.com/jesseVernallis/legv8CPU.git,2023-12-21 19:20:04+00:00,,0,jesseVernallis/legv8CPU,734474254,SystemVerilog,legv8CPU,197,0,2023-12-26 19:26:09+00:00,[],None
142,https://github.com/rishabh4749/D_latch.git,2023-12-29 06:25:19+00:00,,0,rishabh4749/D_latch,736879887,SystemVerilog,D_latch,4,0,2024-01-13 14:42:14+00:00,[],None
143,https://github.com/wa-kakalala/des_systemverilog.git,2023-12-29 13:22:34+00:00,implement des with systemverilog,0,wa-kakalala/des_systemverilog,736990277,SystemVerilog,des_systemverilog,1220,0,2023-12-29 14:24:09+00:00,[],None
144,https://github.com/qil008/9bit-Mips-processor.git,2024-01-15 02:18:49+00:00,,0,qil008/9bit-Mips-processor,743338043,SystemVerilog,9bit-Mips-processor,4742,0,2024-01-15 02:18:57+00:00,[],None
145,https://github.com/SrikantDV/counter.git,2024-01-16 09:11:21+00:00,"This is simple 2 bit counter, which counts from 00 to 11. When it will reach 11 again it will start from 00. The reset value of the count value is 00. ",0,SrikantDV/counter,743918665,SystemVerilog,counter,7,0,2024-01-17 05:02:59+00:00,[],None
146,https://github.com/shrujanus/Pipelined-Multimedia-SIMD-Unit.git,2024-01-18 14:07:56+00:00,,0,shrujanus/Pipelined-Multimedia-SIMD-Unit,745033286,SystemVerilog,Pipelined-Multimedia-SIMD-Unit,10394,0,2024-01-18 14:20:16+00:00,[],None
147,https://github.com/Slamy/fpga-color-pong.git,2024-01-14 19:06:50+00:00,A game of pong in color,0,Slamy/fpga-color-pong,743247262,SystemVerilog,fpga-color-pong,99,0,2024-01-15 17:04:04+00:00,[],https://api.github.com/licenses/mit
148,https://github.com/DimanYLT/UIRS_TPU.git,2024-01-19 14:01:50+00:00,,0,DimanYLT/UIRS_TPU,745515805,SystemVerilog,UIRS_TPU,12,0,2024-01-19 14:10:19+00:00,[],None
149,https://github.com/Vietngo2748/UART-IN-FPGA-DE-10-LITE.git,2024-01-03 02:49:15+00:00,Interface between UART and computer to send and receive data,0,Vietngo2748/UART-IN-FPGA-DE-10-LITE,738348230,SystemVerilog,UART-IN-FPGA-DE-10-LITE,10885,0,2024-01-03 03:08:14+00:00,[],None
150,https://github.com/XeniaPhe/Space-Sim-With-VGA-and-PS2.git,2024-01-18 23:04:26+00:00,A basic screen with a movable spaceship with cyclone IV EP4CE22F17 a VGA monitor and a PS2 keyboard,0,XeniaPhe/Space-Sim-With-VGA-and-PS2,745240463,SystemVerilog,Space-Sim-With-VGA-and-PS2,150852,0,2024-01-18 23:09:11+00:00,[],None
151,https://github.com/MKrekker/SystemVerilog.git,2024-01-10 21:19:30+00:00,,0,MKrekker/SystemVerilog,741663524,SystemVerilog,SystemVerilog,22,0,2024-01-22 21:37:19+00:00,[],None
152,https://github.com/michaelgranberryii/fpga-guessing-game.git,2024-01-05 23:07:24+00:00,,0,michaelgranberryii/fpga-guessing-game,739579525,SystemVerilog,fpga-guessing-game,15,0,2024-01-05 23:08:13+00:00,[],None
153,https://github.com/SZ425/eecs470-project1.git,2024-01-22 21:29:46+00:00,,0,SZ425/eecs470-project1,746884548,SystemVerilog,eecs470-project1,4,0,2024-01-22 22:18:19+00:00,[],None
154,https://github.com/hsirrk/CPU-Design-with-FSM-Control.git,2024-01-23 03:25:58+00:00,,0,hsirrk/CPU-Design-with-FSM-Control,746992075,SystemVerilog,CPU-Design-with-FSM-Control,33,0,2024-01-23 03:38:46+00:00,[],None
155,https://github.com/Gnel77/FullAdder.git,2024-01-23 19:49:55+00:00,"This is my first ""work"" I do in Github. Hope you will find it useful. I tried to find solutions of FullAdder in Verilog program, but not all program pass the TestBench.",0,Gnel77/FullAdder,747371475,SystemVerilog,FullAdder,7,0,2024-01-23 19:55:30+00:00,[],None
156,https://github.com/sidharthsudhir-03/RISC-V-Implementation.git,2024-01-22 21:41:10+00:00,,0,sidharthsudhir-03/RISC-V-Implementation,746888195,SystemVerilog,RISC-V-Implementation,261,0,2024-01-22 22:38:07+00:00,[],None
157,https://github.com/Didi7777777/EE387.git,2024-01-17 19:31:32+00:00,,0,Didi7777777/EE387,744676026,SystemVerilog,EE387,43,0,2024-02-06 15:42:55+00:00,[],None
158,https://github.com/Sourishs500/DAV2023.git,2024-01-18 07:46:21+00:00,,0,Sourishs500/DAV2023,744883518,SystemVerilog,DAV2023,7645,0,2024-02-09 20:26:15+00:00,[],None
159,https://github.com/naithanianshul/Single-Core-5-stage-MIPS-pipeline-RTL.git,2023-12-20 16:06:17+00:00,RTL design of a single core 5-stage MIPS pipeline CPU implementation in Verilog,0,naithanianshul/Single-Core-5-stage-MIPS-pipeline-RTL,733997541,SystemVerilog,Single-Core-5-stage-MIPS-pipeline-RTL,32,0,2023-12-22 02:16:09+00:00,[],None
160,https://github.com/Hitesh-K18/XOR-Verification-with-UVM.git,2024-01-15 19:29:56+00:00,,0,Hitesh-K18/XOR-Verification-with-UVM,743693169,SystemVerilog,XOR-Verification-with-UVM,7,0,2024-02-01 16:42:55+00:00,[],None
161,https://github.com/Kyrithdagon/EE-CS120A.git,2024-01-20 21:32:32+00:00,,0,Kyrithdagon/EE-CS120A,746030235,SystemVerilog,EE-CS120A,2315,0,2024-02-03 00:23:31+00:00,"['labs', 'systemverilog', 'verilog', 'eda-playground', 'icarus-verilog']",None
162,https://github.com/mitha-rao/J-K-flip-flop-Layered-testbench-system-verilog.git,2024-01-08 13:32:47+00:00,,0,mitha-rao/J-K-flip-flop-Layered-testbench-system-verilog,740503196,SystemVerilog,J-K-flip-flop-Layered-testbench-system-verilog,14,0,2024-03-10 07:03:23+00:00,[],None
163,https://github.com/t1msi/fpga_lab_1.git,2024-01-05 12:29:00+00:00,,0,t1msi/fpga_lab_1,739380018,SystemVerilog,fpga_lab_1,989,0,2024-01-08 10:07:38+00:00,[],None
164,https://github.com/D-girl-11t/UVM-based-verification-of-a-Simple-Calculator-.git,2023-12-20 18:06:03+00:00,,0,D-girl-11t/UVM-based-verification-of-a-Simple-Calculator-,734040663,SystemVerilog,UVM-based-verification-of-a-Simple-Calculator-,54,0,2023-12-20 18:08:00+00:00,[],None
165,https://github.com/natelannan-osu/dldFinalProject_Spring24.git,2024-01-16 05:14:32+00:00,Final Project for Digital Logic Design Spring 24,0,natelannan-osu/dldFinalProject_Spring24,743839509,SystemVerilog,dldFinalProject_Spring24,7282,0,2024-04-01 05:51:55+00:00,[],None
166,https://github.com/Jiawey1227/SV_Project.git,2024-01-25 01:31:30+00:00,some SystemVerilog projects,0,Jiawey1227/SV_Project,747962559,SystemVerilog,SV_Project,49,0,2024-01-26 22:50:57+00:00,[],None
167,https://github.com/tdloveless/iu-vlsi.git,2024-01-06 13:40:37+00:00,IUB ENGR-E-399/599 VLSI Course Material,1,tdloveless/iu-vlsi,739767893,SystemVerilog,iu-vlsi,35840,0,2024-02-15 18:12:39+00:00,[],https://api.github.com/licenses/apache-2.0
168,https://github.com/fyflxl/try.git,2023-12-19 09:50:52+00:00,,0,fyflxl/try,733424599,SystemVerilog,try,34,0,2023-12-19 09:53:30+00:00,[],None
169,https://github.com/Raghubabu7993/Systemverilog.git,2023-12-21 07:13:12+00:00,,0,Raghubabu7993/Systemverilog,734228861,SystemVerilog,Systemverilog,2,0,2023-12-21 09:23:38+00:00,[],None
170,https://github.com/punzik/lfsr-coundown.git,2023-12-27 13:08:48+00:00,Down counter based on LFSR,0,punzik/lfsr-coundown,736275265,SystemVerilog,lfsr-coundown,9,0,2023-12-27 13:09:49+00:00,[],None
171,https://github.com/AYYAZmayo/SystemVerilog_Functional_Coverage.git,2023-12-28 11:43:26+00:00,,0,AYYAZmayo/SystemVerilog_Functional_Coverage,736616125,SystemVerilog,SystemVerilog_Functional_Coverage,473,0,2023-12-28 13:12:35+00:00,[],None
172,https://github.com/shanmukhsai2k2/Cocotb-SDIO.git,2023-12-27 11:28:45+00:00,,0,shanmukhsai2k2/Cocotb-SDIO,736245641,SystemVerilog,Cocotb-SDIO,33,0,2023-12-28 14:21:13+00:00,[],None
173,https://github.com/sjb565/fpga-video-enhancement.git,2023-12-16 06:10:27+00:00,Realtime video upsampling by four times using bicubic interpolation purely on FPGA,0,sjb565/fpga-video-enhancement,732276753,SystemVerilog,fpga-video-enhancement,8545,0,2023-12-16 06:23:00+00:00,[],None
174,https://github.com/kaleabmarkos/Vending-Machine-PR.git,2024-01-02 03:16:07+00:00,,0,kaleabmarkos/Vending-Machine-PR,737946282,SystemVerilog,Vending-Machine-PR,6,0,2024-01-02 03:18:14+00:00,[],None
175,https://github.com/Jonty16117/verilog-practice.git,2023-12-25 20:42:24+00:00,,0,Jonty16117/verilog-practice,735688974,SystemVerilog,verilog-practice,20,0,2023-12-27 15:41:34+00:00,[],None
176,https://github.com/0rdhiman0/100rtl.git,2024-01-06 10:50:20+00:00,,0,0rdhiman0/100rtl,739722775,SystemVerilog,100rtl,2,0,2024-01-06 11:04:34+00:00,[],None
177,https://github.com/Anunalla/SimpleAsPossibleProcessor.git,2023-12-27 20:08:47+00:00,,0,Anunalla/SimpleAsPossibleProcessor,736403514,SystemVerilog,SimpleAsPossibleProcessor,5,0,2023-12-27 20:08:53+00:00,[],None
178,https://github.com/pveligeti2/RISC-V-Functional-Verification.git,2024-01-10 10:29:01+00:00,,0,pveligeti2/RISC-V-Functional-Verification,741406491,SystemVerilog,RISC-V-Functional-Verification,75,0,2024-01-10 10:43:31+00:00,[],None
179,https://github.com/imanand816/Design-and-Verification-of-Synchronous-FIFO-using-System-Verilog.git,2024-01-14 06:55:35+00:00,,0,imanand816/Design-and-Verification-of-Synchronous-FIFO-using-System-Verilog,743050739,SystemVerilog,Design-and-Verification-of-Synchronous-FIFO-using-System-Verilog,136,0,2024-01-14 07:09:10+00:00,[],None
180,https://github.com/ananya343B/BCD-7seg_layered_tb.git,2024-01-16 16:35:23+00:00,,0,ananya343B/BCD-7seg_layered_tb,744109970,SystemVerilog,BCD-7seg_layered_tb,10,0,2024-01-16 16:36:38+00:00,[],None
181,https://github.com/stefg2002/DE10-Lite-Code-Cracker.git,2024-01-18 18:27:43+00:00,,0,stefg2002/DE10-Lite-Code-Cracker,745147743,SystemVerilog,DE10-Lite-Code-Cracker,4799,0,2024-01-18 18:40:24+00:00,[],None
182,https://github.com/Leon-Shao/CSI_loopback.git,2024-01-06 21:32:02+00:00,,0,Leon-Shao/CSI_loopback,739893139,SystemVerilog,CSI_loopback,707,0,2024-01-20 22:35:49+00:00,[],None
183,https://github.com/shrey3000/Arithematic_Logic_Unit.git,2024-01-21 17:54:23+00:00,,0,shrey3000/Arithematic_Logic_Unit,746317477,SystemVerilog,Arithematic_Logic_Unit,27,0,2024-01-21 18:06:35+00:00,[],None
184,https://github.com/Lols2002/Ascon128_Cipher.git,2024-01-18 11:24:39+00:00,,0,Lols2002/Ascon128_Cipher,744968274,SystemVerilog,Ascon128_Cipher,280,0,2024-01-23 08:49:57+00:00,[],None
185,https://github.com/flaviens/cxxrtl-b6.git,2024-01-24 14:54:05+00:00,,0,flaviens/cxxrtl-b6,747741955,SystemVerilog,cxxrtl-b6,7,0,2024-01-24 15:00:53+00:00,[],None
186,https://github.com/feipenghhq/NRC.git,2023-12-22 19:20:40+00:00,,0,feipenghhq/NRC,734840751,SystemVerilog,NRC,442,0,2024-01-21 03:42:00+00:00,[],https://api.github.com/licenses/apache-2.0
187,https://github.com/tanitime/ee469.git,2024-01-25 22:53:31+00:00,Lab work in EE 469 Computer Architecture at the University of Washington,0,tanitime/ee469,748410956,SystemVerilog,ee469,171,0,2024-01-25 22:56:10+00:00,[],None
188,https://github.com/Gorruy/priority_encoder.git,2024-01-11 06:42:43+00:00,,0,Gorruy/priority_encoder,741809297,SystemVerilog,priority_encoder,141,0,2024-01-26 08:33:13+00:00,[],None
189,https://github.com/AlexWalburg/digital_audio_mixer.git,2023-12-26 21:02:35+00:00,Digital audio mixer in system verilog. Formally verified using symbiyosys,0,AlexWalburg/digital_audio_mixer,736050368,SystemVerilog,digital_audio_mixer,21,0,2023-12-26 21:05:54+00:00,[],None
190,https://github.com/LucasDamo22/uart-module-for-32-bit-words.git,2023-12-18 19:17:43+00:00,,0,LucasDamo22/uart-module-for-32-bit-words,733193611,SystemVerilog,uart-module-for-32-bit-words,46,0,2023-12-18 19:18:24+00:00,[],None
191,https://github.com/shariethernet/custom_zynq_1.git,2024-01-21 15:55:57+00:00,AXI4 Lite Slave - Zynq based Design,0,shariethernet/custom_zynq_1,746280339,SystemVerilog,custom_zynq_1,442,0,2024-02-06 20:32:49+00:00,[],https://api.github.com/licenses/mit
192,https://github.com/Mi5sssss/ECSE-6700-Advanced-Computer-Architecture.git,2024-01-19 01:27:36+00:00,Code for ECSE 6700 Advanced Computer Architecture,0,Mi5sssss/ECSE-6700-Advanced-Computer-Architecture,745274142,SystemVerilog,ECSE-6700-Advanced-Computer-Architecture,580,0,2024-02-18 21:09:50+00:00,[],None
193,https://github.com/NilsDunlop/DIT728-Assignments.git,2024-01-16 09:02:50+00:00,,0,NilsDunlop/DIT728-Assignments,743915429,SystemVerilog,DIT728-Assignments,4053,0,2024-02-13 09:57:53+00:00,[],None
194,https://github.com/adam2305/ASCON128-crypto.git,2023-12-29 18:37:28+00:00,,0,adam2305/ASCON128-crypto,737076799,SystemVerilog,ASCON128-crypto,1535,0,2024-03-08 19:10:40+00:00,[],None
195,https://github.com/Fazail333/Booths_Multiplier.git,2023-12-25 10:21:50+00:00,,0,Fazail333/Booths_Multiplier,735550976,SystemVerilog,Booths_Multiplier,3198,0,2023-12-25 10:51:59+00:00,[],None
196,https://github.com/netchipguy/opencos.git,2024-01-22 08:24:28+00:00,OpenCOS -- the Open Chip Operating System,0,netchipguy/opencos,746548000,SystemVerilog,opencos,2413,0,2024-02-11 00:10:09+00:00,[],https://api.github.com/licenses/mpl-2.0
197,https://github.com/PankajNair/Single-Cycle-RISC-V-Processor.git,2024-01-03 18:36:25+00:00,My implementation of the single-cycle RISC-V processor.,0,PankajNair/Single-Cycle-RISC-V-Processor,738659828,SystemVerilog,Single-Cycle-RISC-V-Processor,173,0,2024-03-30 19:27:00+00:00,[],None
198,https://github.com/jacquesc03/MazeRunner.git,2024-01-20 14:21:52+00:00,,0,jacquesc03/MazeRunner,745910522,SystemVerilog,MazeRunner,134,0,2024-01-20 14:29:05+00:00,[],None
199,https://github.com/UrosSrbulj/formalna.git,2024-01-18 00:03:08+00:00,,0,UrosSrbulj/formalna,744755384,SystemVerilog,formalna,12,0,2024-01-18 00:06:29+00:00,[],None
200,https://github.com/DanilTensa/isDD.git,2024-01-24 03:25:32+00:00,dajkey,0,DanilTensa/isDD,747496589,SystemVerilog,isDD,47,0,2024-01-24 03:25:50+00:00,[],None
201,https://github.com/xuzy8888/9bit-processor.git,2024-01-10 09:21:23+00:00,A 9 bit processor implemented with System Verilog that can perform simple arithmetic operations,0,xuzy8888/9bit-processor,741379431,SystemVerilog,9bit-processor,12,0,2024-01-23 21:25:33+00:00,[],None
202,https://github.com/patrickzha/MLP_Accelerator-project.git,2024-01-21 11:27:29+00:00,,0,patrickzha/MLP_Accelerator-project,746201136,SystemVerilog,MLP_Accelerator-project,367,0,2024-01-21 11:43:48+00:00,[],None
203,https://github.com/OmniaMohamed12/ALU-Verification-using-SystemVerilog.git,2024-01-22 17:56:57+00:00,Graduation project of ITI Digital IC Verification Internship,0,OmniaMohamed12/ALU-Verification-using-SystemVerilog,746805748,SystemVerilog,ALU-Verification-using-SystemVerilog,2318,0,2024-01-23 14:47:37+00:00,[],None
204,https://github.com/mgleeim1/EE303.git,2024-01-25 19:49:23+00:00,This is a System Verilog code for a EE303(B) project to make a Digital watch. ,0,mgleeim1/EE303,748353613,SystemVerilog,EE303,1185,0,2024-01-25 19:50:55+00:00,[],None
205,https://github.com/jimbro1000/fpga6847rgb.git,2024-01-20 16:31:01+00:00,Synthetic replacement for the Motorola 6847 Video Generator with PAL or NTSC RGB output,0,jimbro1000/fpga6847rgb,745949423,SystemVerilog,fpga6847rgb,15121,0,2024-01-20 17:42:19+00:00,[],https://api.github.com/licenses/mit
206,https://github.com/mfallon90/mac.git,2024-01-14 20:36:06+00:00,,0,mfallon90/mac,743269367,SystemVerilog,mac,22,0,2024-01-15 23:52:06+00:00,[],None
207,https://github.com/UmerShahidengr/MatMul_Accelerator.git,2024-01-16 17:53:41+00:00,,0,UmerShahidengr/MatMul_Accelerator,744144026,SystemVerilog,MatMul_Accelerator,6793,0,2024-01-30 14:29:31+00:00,[],None
208,https://github.com/lkim07/Baccarat.git,2023-12-23 22:42:05+00:00,,0,lkim07/Baccarat,735166235,SystemVerilog,Baccarat,7,0,2023-12-23 22:44:34+00:00,[],None
209,https://github.com/ABID-U/https-3-Stage-Pipelined-Processor-with-CSR-support.git,2023-12-27 20:22:27+00:00,,0,ABID-U/https-3-Stage-Pipelined-Processor-with-CSR-support,736406693,SystemVerilog,https-3-Stage-Pipelined-Processor-with-CSR-support,296,0,2023-12-27 20:25:45+00:00,[],None
210,https://github.com/galaxybabyy/LABA_SAP_2.git,2023-12-26 18:24:09+00:00,,0,galaxybabyy/LABA_SAP_2,736013502,SystemVerilog,LABA_SAP_2,4,0,2023-12-26 18:57:55+00:00,[],None
211,https://github.com/abhiverma13/RISC-Machine.git,2023-12-18 03:40:55+00:00,,0,abhiverma13/RISC-Machine,732871503,SystemVerilog,RISC-Machine,501,0,2023-12-29 20:22:26+00:00,[],None
212,https://github.com/SreenivasanJJ/carry_save_adder.git,2023-12-31 15:17:26+00:00,,0,SreenivasanJJ/carry_save_adder,737572338,SystemVerilog,carry_save_adder,10,0,2023-12-31 15:19:09+00:00,[],None
213,https://github.com/hamid-chipstack/testing.git,2023-12-29 22:11:01+00:00,All the benchmarks for different projects,0,hamid-chipstack/testing,737120833,SystemVerilog,testing,4,0,2023-12-29 22:44:02+00:00,[],None
214,https://github.com/nvchuyen/Understanding_Virtual_Sequencer.git,2023-12-26 08:37:38+00:00,,0,nvchuyen/Understanding_Virtual_Sequencer,735844885,SystemVerilog,Understanding_Virtual_Sequencer,5430,0,2023-12-27 08:53:20+00:00,[],None
215,https://github.com/thunnie920/COSE221.git,2024-01-02 12:52:03+00:00,Digital Logic Design,0,thunnie920/COSE221,738109337,SystemVerilog,COSE221,2677,0,2024-01-02 13:04:12+00:00,[],None
216,https://github.com/thunnie920/COSE222.git,2024-01-02 13:10:09+00:00,Computer Architecture,0,thunnie920/COSE222,738115443,SystemVerilog,COSE222,18842,0,2024-01-02 13:12:22+00:00,[],None
217,https://github.com/cimonik/CPU_singlecycle.git,2024-01-03 11:07:04+00:00,single cycle risc V Cpu,0,cimonik/CPU_singlecycle,738495744,SystemVerilog,CPU_singlecycle,6,0,2024-01-03 11:08:46+00:00,[],None
218,https://github.com/Sanjay4477/12-hour-clock-using-Verilog.git,2024-01-07 14:46:25+00:00,,0,Sanjay4477/12-hour-clock-using-Verilog,740105777,SystemVerilog,12-hour-clock-using-Verilog,0,0,2024-01-07 15:10:40+00:00,[],None
219,https://github.com/rishabh4749/Left_Right_Rotator.git,2024-01-01 17:37:42+00:00,,0,rishabh4749/Left_Right_Rotator,737841748,SystemVerilog,Left_Right_Rotator,4,0,2024-01-13 14:53:37+00:00,[],None
220,https://github.com/dsa-shua/FPGA-SystolicArray.git,2024-01-08 14:32:07+00:00,"Working 8x8 systolic array hardware implemented in Xilinx Vivado, operated and controlled in software using Xilinx Vitis",0,dsa-shua/FPGA-SystolicArray,740529937,SystemVerilog,FPGA-SystolicArray,1662,0,2024-02-16 12:25:15+00:00,"['accelerator', 'fpga', 'hardware', 'hardware-acceleration', 'hardware-designs', 'hdl', 'matrix', 'matrix-multiplication', 'project', 'pynq-z2', 'sdk', 'systemverilog', 'systolic-arrays', 'verilog', 'vitis', 'vivado', 'xilinx', 'zynq-7000']",None
221,https://github.com/kashorafof/Riscv32I_SV_implementation.git,2024-01-12 17:12:55+00:00,Implementation of the Riscv32i ISA using systemverilog,0,kashorafof/Riscv32I_SV_implementation,742524857,SystemVerilog,Riscv32I_SV_implementation,1531,0,2024-02-20 09:54:48+00:00,[],None
222,https://github.com/Benjamin-Anderson-II/ECE_272-Lab6.git,2023-12-23 00:52:22+00:00,VGA color switcher (no ROM),0,Benjamin-Anderson-II/ECE_272-Lab6,734901787,SystemVerilog,ECE_272-Lab6,1,0,2023-12-23 00:52:44+00:00,[],None
223,https://github.com/nick-pilgrim/Microprocessor.git,2023-12-26 21:14:57+00:00,This file contains the programming for a microprocessor,0,nick-pilgrim/Microprocessor,736052803,SystemVerilog,Microprocessor,5,0,2023-12-26 21:15:10+00:00,[],None
224,https://github.com/rykent/OTTER-MCU_LCD_Demo.git,2023-12-27 06:40:32+00:00,,0,rykent/OTTER-MCU_LCD_Demo,736163047,SystemVerilog,OTTER-MCU_LCD_Demo,706,0,2023-12-27 07:01:07+00:00,[],None
225,https://github.com/kysya11/Sapr1.git,2023-12-20 23:06:53+00:00,,0,kysya11/Sapr1,734118139,SystemVerilog,Sapr1,13,0,2023-12-20 23:47:43+00:00,[],None
226,https://github.com/WajahatRiaz/AHB-Lite-Smoke.git,2023-12-27 09:59:28+00:00,,0,WajahatRiaz/AHB-Lite-Smoke,736219442,SystemVerilog,AHB-Lite-Smoke,1266,0,2023-12-27 10:04:08+00:00,[],https://api.github.com/licenses/gpl-3.0
227,https://github.com/talha6663/three-stage-pipelined-processor.git,2023-12-30 17:25:17+00:00,,0,talha6663/three-stage-pipelined-processor,737342301,SystemVerilog,three-stage-pipelined-processor,383,0,2023-12-30 17:28:18+00:00,[],None
228,https://github.com/vakeesank99/Matrix_multiplication_ip.git,2023-12-16 11:55:40+00:00,This is matrix multiplication ip for vivado 2018.3 design flow using zybo board. you can find both verilog and SDK files here,0,vakeesank99/Matrix_multiplication_ip,732353782,SystemVerilog,Matrix_multiplication_ip,251,0,2023-12-16 12:05:36+00:00,[],None
229,https://github.com/Umer282Irshad/RISCV_3Stage.git,2023-12-30 18:00:28+00:00,,0,Umer282Irshad/RISCV_3Stage,737350426,SystemVerilog,RISCV_3Stage,167,0,2023-12-30 18:07:43+00:00,[],None
230,https://github.com/Hirasoh/Risc_V_Termproject.git,2023-12-30 15:27:53+00:00,,0,Hirasoh/Risc_V_Termproject,737313399,SystemVerilog,Risc_V_Termproject,377,0,2023-12-30 15:34:40+00:00,[],None
231,https://github.com/vaixbhav/risc-machine.git,2024-01-04 00:11:18+00:00,Designed RISC Machine using Verilog HDL to follow extensive instruction set. Processor pipelined for efficient instruction execution and maximal performance.,0,vaixbhav/risc-machine,738743329,SystemVerilog,risc-machine,31,0,2024-01-04 02:46:44+00:00,[],None
232,https://github.com/JianmingTONG/ZPRIZE_AWS.git,2024-01-05 06:12:53+00:00,,0,JianmingTONG/ZPRIZE_AWS,739257264,SystemVerilog,ZPRIZE_AWS,124,0,2024-01-05 06:56:36+00:00,[],None
233,https://github.com/raiyan-2002/RISC.git,2024-01-06 06:41:53+00:00,,0,raiyan-2002/RISC,739664260,SystemVerilog,RISC,684,0,2024-01-06 06:42:00+00:00,[],None
234,https://github.com/OmarAzula/lab_project.git,2023-12-30 18:53:06+00:00,,0,OmarAzula/lab_project,737361901,SystemVerilog,lab_project,157,0,2024-01-07 17:18:02+00:00,[],None
235,https://github.com/prateek-0328/Memory-Subsystem-with-Approximate-Data-Transfer.git,2023-12-18 11:23:46+00:00,"Implemented a memory subsystem consisting of an L1D cache and a main memory. Whenever there is a miss in L1D cache, an error tolerance information is sent along with the data request that aims to reduce power consumption. This project is implemented using the HDL language - SystemVerilog.",0,prateek-0328/Memory-Subsystem-with-Approximate-Data-Transfer,733015737,SystemVerilog,Memory-Subsystem-with-Approximate-Data-Transfer,8,0,2023-12-18 11:26:27+00:00,[],None
236,https://github.com/mahmedadawy2013/SV_TB_Register_Memory.git,2023-12-20 07:12:54+00:00,,0,mahmedadawy2013/SV_TB_Register_Memory,733809289,SystemVerilog,SV_TB_Register_Memory,322,0,2023-12-20 07:13:47+00:00,[],None
237,https://github.com/HummockHamek/Design-and-Verification-of-Synchronous-FIFO-using-SystemVerilog.git,2024-01-14 18:28:58+00:00,,0,HummockHamek/Design-and-Verification-of-Synchronous-FIFO-using-SystemVerilog,743236773,SystemVerilog,Design-and-Verification-of-Synchronous-FIFO-using-SystemVerilog,12,0,2024-01-14 18:33:06+00:00,[],None
238,https://github.com/rishabh4749/DFF_Reset_Value.git,2023-12-28 19:17:50+00:00,,0,rishabh4749/DFF_Reset_Value,736752426,SystemVerilog,DFF_Reset_Value,4,0,2024-01-13 14:39:05+00:00,[],None
239,https://github.com/ValdiviaM/algoritmo_de_booth.git,2024-01-11 15:35:57+00:00,,0,ValdiviaM/algoritmo_de_booth,742017064,SystemVerilog,algoritmo_de_booth,327,0,2024-01-11 15:48:53+00:00,[],None
240,https://github.com/AlanVanDang/Comp541-Final-Project-Wild-West-Showdown.git,2024-01-22 21:48:33+00:00,Western Showdown game for Comp541 Final Project.,0,AlanVanDang/Comp541-Final-Project-Wild-West-Showdown,746890344,SystemVerilog,Comp541-Final-Project-Wild-West-Showdown,6929,0,2024-01-22 22:57:38+00:00,[],None
241,https://github.com/achen200/hamming_parity.git,2024-01-24 00:10:13+00:00,,0,achen200/hamming_parity,747447616,SystemVerilog,hamming_parity,83,0,2024-01-24 00:11:31+00:00,[],None
242,https://github.com/MaxSailor/EITF35.git,2024-01-25 14:35:40+00:00,The LTH EITF35 course,0,MaxSailor/EITF35,748223888,SystemVerilog,EITF35,5,0,2024-01-25 14:45:47+00:00,[],None
243,https://github.com/varun-rajesh/SPI.git,2024-01-25 18:59:34+00:00,,0,varun-rajesh/SPI,748334213,SystemVerilog,SPI,90,0,2024-01-25 22:42:33+00:00,[],None
244,https://github.com/CovJus01/Image-Decompressor-Project.git,2024-01-18 00:30:33+00:00,Group Project Code for the Image decompression project,0,CovJus01/Image-Decompressor-Project,744762207,SystemVerilog,Image-Decompressor-Project,2593,0,2024-01-18 00:32:08+00:00,[],None
245,https://github.com/kapi36/Verification-of-16-bit-counter-using-Systemverilog.git,2024-01-17 13:51:38+00:00,In this project i am doing verification of 8 bit Counter using systemVerilog. The project is very basic and at this moment i am learning System verilog so this project is my first project in System verilog. ,0,kapi36/Verification-of-16-bit-counter-using-Systemverilog,744533407,SystemVerilog,Verification-of-16-bit-counter-using-Systemverilog,4,0,2024-01-19 13:44:56+00:00,[],None
246,https://github.com/jafetsoto/RVfpga-Cache-Implementation.git,2024-01-18 01:28:34+00:00,"Taking as a base the RVfpga system, designed for the Nexys 4DDR board, we will incorporate a cache memory into the system.",0,jafetsoto/RVfpga-Cache-Implementation,744777101,SystemVerilog,RVfpga-Cache-Implementation,6692,0,2024-02-02 02:57:54+00:00,[],None
247,https://github.com/KOTHAVANI/APB_PROTOCOL.git,2024-01-25 19:47:52+00:00,,1,KOTHAVANI/APB_PROTOCOL,748353011,SystemVerilog,APB_PROTOCOL,51,0,2024-02-05 10:29:38+00:00,[],None
248,https://github.com/pat0kamba/Vending-Machine.git,2024-01-18 23:25:07+00:00,,0,pat0kamba/Vending-Machine,745245400,SystemVerilog,Vending-Machine,7,0,2024-02-06 15:44:07+00:00,[],None
249,https://github.com/ZAINABFATIMA0/3-Stage-pipeline-Risc_V-architecture.git,2023-12-30 17:33:08+00:00,,0,ZAINABFATIMA0/3-Stage-pipeline-Risc_V-architecture,737344172,SystemVerilog,3-Stage-pipeline-Risc_V-architecture,60,0,2024-02-25 15:24:45+00:00,[],None
250,https://github.com/skshamshi/ECE593-W24-Project.git,2024-01-23 04:30:10+00:00,Design and Verification of Async FIFO,0,skshamshi/ECE593-W24-Project,747008330,SystemVerilog,ECE593-W24-Project,874,0,2024-01-25 20:03:44+00:00,[],None
251,https://github.com/abfouts/ece_593_asynchronous_fifo.git,2024-01-25 04:05:27+00:00,Final project for Portland States ECE 593 Pre Silicon Validation,1,abfouts/ece_593_asynchronous_fifo,748001525,SystemVerilog,ece_593_asynchronous_fifo,2379,0,2024-01-26 01:42:45+00:00,[],None
252,https://github.com/arruk/MIPS_monocycle.git,2024-01-09 20:10:37+00:00,,0,arruk/MIPS_monocycle,741155092,SystemVerilog,MIPS_monocycle,5,0,2024-01-09 21:43:41+00:00,[],None
253,https://github.com/Omar123511/Digital_Verification.git,2023-12-18 04:22:21+00:00,,0,Omar123511/Digital_Verification,732880625,SystemVerilog,Digital_Verification,50,0,2024-03-24 20:24:03+00:00,[],None
254,https://github.com/jgr1024/240D_softmax.git,2023-12-16 02:49:54+00:00,,0,jgr1024/240D_softmax,732239984,SystemVerilog,240D_softmax,150,0,2023-12-16 03:44:36+00:00,[],None
255,https://github.com/mira-sweis/MIPS-Multi-Cycle-CPU.git,2023-12-18 05:32:22+00:00,,0,mira-sweis/MIPS-Multi-Cycle-CPU,732896735,SystemVerilog,MIPS-Multi-Cycle-CPU,4,0,2023-12-18 05:33:33+00:00,[],None
256,https://github.com/DOKurilova/labaAPB.git,2023-12-18 14:27:41+00:00,,0,DOKurilova/labaAPB,733085026,SystemVerilog,labaAPB,12,0,2023-12-18 15:39:32+00:00,[],None
257,https://github.com/pauliedrico/MBE-RAD4-MULTIPLIER.git,2023-12-18 20:06:31+00:00,A MBE (Modified Booth Encoding) RAD4 (Radix-4) Multiplier implementation in System Verilog,0,pauliedrico/MBE-RAD4-MULTIPLIER,733208445,SystemVerilog,MBE-RAD4-MULTIPLIER,3311,0,2023-12-18 20:09:18+00:00,[],https://api.github.com/licenses/mit
258,https://github.com/Yoavyu/FIFO-Associative-Cache.git,2023-12-21 09:58:48+00:00,,0,Yoavyu/FIFO-Associative-Cache,734284408,SystemVerilog,FIFO-Associative-Cache,16,0,2023-12-24 13:50:42+00:00,[],None
259,https://github.com/Benjamin-Anderson-II/ECE_271-Final.git,2023-12-23 00:54:26+00:00,RNGenerator that prints to 7seg,0,Benjamin-Anderson-II/ECE_271-Final,734902041,SystemVerilog,ECE_271-Final,1054,0,2023-12-23 00:55:03+00:00,[],None
260,https://github.com/mathewwu11/ARC4-Decryption-Circuit.git,2023-12-24 00:59:39+00:00,,0,mathewwu11/ARC4-Decryption-Circuit,735184452,SystemVerilog,ARC4-Decryption-Circuit,8,0,2023-12-24 01:04:48+00:00,"['systemverilog', 'verilog']",None
261,https://github.com/zhuravlik-top/VERILOG.git,2023-12-21 09:13:19+00:00,,0,zhuravlik-top/VERILOG,734268399,SystemVerilog,VERILOG,10,0,2023-12-27 21:11:35+00:00,[],None
262,https://github.com/m1chellelinn/Reduced-Instruction-Set-Computer-Implementation.git,2023-12-26 08:33:47+00:00,,0,m1chellelinn/Reduced-Instruction-Set-Computer-Implementation,735843863,SystemVerilog,Reduced-Instruction-Set-Computer-Implementation,17,0,2023-12-26 08:33:53+00:00,[],None
263,https://github.com/TheGreatGitsby/rtl_blocks.git,2023-12-16 15:52:15+00:00,Common reuse structures,0,TheGreatGitsby/rtl_blocks,732416264,SystemVerilog,rtl_blocks,10,0,2023-12-28 02:22:42+00:00,[],https://api.github.com/licenses/apache-2.0
264,https://github.com/ksx2/verilogTask2.git,2023-12-28 06:36:48+00:00,,0,ksx2/verilogTask2,736528513,SystemVerilog,verilogTask2,3,0,2023-12-28 06:38:46+00:00,[],None
265,https://github.com/shahzaib663/CA_FINAL_PROJECT.git,2023-12-30 18:06:52+00:00,new repo,0,shahzaib663/CA_FINAL_PROJECT,737351824,SystemVerilog,CA_FINAL_PROJECT,302,0,2023-12-30 18:25:42+00:00,[],None
266,https://github.com/mikearl774/DES-Spr22.git,2023-12-30 18:08:30+00:00,,0,mikearl774/DES-Spr22,737352191,SystemVerilog,DES-Spr22,39351,0,2023-12-30 18:11:08+00:00,[],None
267,https://github.com/dav3floyd/FEC-Processor.git,2023-12-31 07:17:07+00:00,Custom processor that supports specific Forward Error Correction (FEC) tasks.,0,dav3floyd/FEC-Processor,737477810,SystemVerilog,FEC-Processor,87,0,2023-12-31 07:38:15+00:00,[],None
268,https://github.com/mohamedvdn/COCOTB-SDIO_PROTOCOL.git,2023-12-29 13:35:45+00:00,,1,mohamedvdn/COCOTB-SDIO_PROTOCOL,736993978,SystemVerilog,COCOTB-SDIO_PROTOCOL,35,0,2023-12-31 01:10:33+00:00,[],None
269,https://github.com/IvanGrafsky/gray_vs_mtstb.git,2023-12-31 21:04:31+00:00,,0,IvanGrafsky/gray_vs_mtstb,737634411,SystemVerilog,gray_vs_mtstb,2,0,2023-12-31 21:12:30+00:00,[],None
270,https://github.com/ManojMaruvapalli/Layered-TestBench.git,2024-01-04 14:22:15+00:00,A Layered Testbench for a Half Adder Design,0,ManojMaruvapalli/Layered-TestBench,738992335,SystemVerilog,Layered-TestBench,2,0,2024-01-04 14:22:20+00:00,[],None
271,https://github.com/qnigma/qnigma-rtl.git,2024-01-04 20:42:28+00:00,,0,qnigma/qnigma-rtl,739125621,SystemVerilog,qnigma-rtl,191,0,2024-01-04 20:51:11+00:00,[],https://api.github.com/licenses/gpl-3.0
272,https://github.com/JellyCo9064/RISC-V-CPU_CSE470.git,2024-01-05 01:30:11+00:00,RISC-V CPU developed for the Xilinx Arty-100T FPGA. Senior project for UW Computer Architecture II.,0,JellyCo9064/RISC-V-CPU_CSE470,739190682,SystemVerilog,RISC-V-CPU_CSE470,720,0,2024-01-05 01:39:06+00:00,[],None
273,https://github.com/AravindK25/AHB-to-APB_Bridge-Verification.git,2024-01-08 13:45:15+00:00,The AHB to APB bridge is an AHB slave which works as an interface between the high speed AHB and the low performance APB buses.,0,AravindK25/AHB-to-APB_Bridge-Verification,740508713,SystemVerilog,AHB-to-APB_Bridge-Verification,926,0,2024-01-08 13:47:52+00:00,[],None
274,https://github.com/Shalu2613/Router-1x3--RTL-Design-and-Verification.git,2024-01-13 15:28:37+00:00,"The router accepts data packets on a single 8- bit port and routes them to one of the three output channels, channel0, channel1 and channel2",0,Shalu2613/Router-1x3--RTL-Design-and-Verification,742858811,SystemVerilog,Router-1x3--RTL-Design-and-Verification,23,0,2024-01-13 15:38:57+00:00,[],None
275,https://github.com/Arvind-Kumar-Dv/constraint.git,2024-01-17 12:21:27+00:00,constraint type coding,0,Arvind-Kumar-Dv/constraint,744495823,SystemVerilog,constraint,154,0,2024-01-17 12:26:55+00:00,[],None
276,https://github.com/CinnamonSandwich/Single_Cycle_RISCV_Core.git,2024-01-04 13:27:36+00:00,A single cycle 5-stage RISCV core ,0,CinnamonSandwich/Single_Cycle_RISCV_Core,738971327,SystemVerilog,Single_Cycle_RISCV_Core,37,0,2024-01-04 13:47:11+00:00,[],None
277,https://github.com/shyeonn/Single_cycle_processor.git,2024-01-19 06:15:15+00:00,Week1,0,shyeonn/Single_cycle_processor,745346662,SystemVerilog,Single_cycle_processor,30,0,2024-01-21 20:40:47+00:00,[],None
278,https://github.com/Umer282Irshad/RISCV_5Stage.git,2024-01-15 18:23:29+00:00,,0,Umer282Irshad/RISCV_5Stage,743669557,SystemVerilog,RISCV_5Stage,30,0,2024-01-15 18:26:47+00:00,[],None
279,https://github.com/ChuckGarcian/verilog.git,2024-01-20 22:05:35+00:00,,0,ChuckGarcian/verilog,746039371,SystemVerilog,verilog,50,0,2024-01-28 19:04:14+00:00,[],None
280,https://github.com/ColinWu427/LZW_FPGA_Occelerator.git,2024-01-23 17:10:37+00:00,"Implementation of LZW algorithm in verilog for FPGA implementation for Senior Capstone, ECE 4872.",0,ColinWu427/LZW_FPGA_Occelerator,747306151,SystemVerilog,LZW_FPGA_Occelerator,19076,0,2024-02-07 00:56:26+00:00,[],None
281,https://github.com/AdamGetBackToWork/Arithmetic_Logic_Unit_indiv_proj.git,2023-12-20 21:24:31+00:00,,0,AdamGetBackToWork/Arithmetic_Logic_Unit_indiv_proj,734095859,SystemVerilog,Arithmetic_Logic_Unit_indiv_proj,406,0,2024-03-09 20:40:59+00:00,[],None
282,https://github.com/fsaltunyuva/CMPE361-LAB5.git,2023-12-26 10:05:50+00:00,SystemVerilog Lab for the CMPE361 (Computer Organization) Course.,0,fsaltunyuva/CMPE361-LAB5,735869457,SystemVerilog,CMPE361-LAB5,15,0,2024-03-24 10:57:44+00:00,[],None
283,https://github.com/sakhan-1111/IEEE754-Encoder.git,2023-12-19 23:40:32+00:00,System Verilog code for single precision IEEE754 encoder.,0,sakhan-1111/IEEE754-Encoder,733701766,SystemVerilog,IEEE754-Encoder,13,0,2023-12-19 23:41:13+00:00,[],https://api.github.com/licenses/gpl-3.0
284,https://github.com/jack1ew/RISC-V_CPU.git,2023-12-20 19:11:37+00:00,RISC-V CPU that computes the square root of a number up to a certain accuracy.,0,jack1ew/RISC-V_CPU,734060411,SystemVerilog,RISC-V_CPU,368,0,2023-12-20 19:14:53+00:00,[],None
285,https://github.com/Mariam-Sherif/Design-and-UVM-verification-for-Memory.git,2023-12-22 18:48:35+00:00,,0,Mariam-Sherif/Design-and-UVM-verification-for-Memory,734832859,SystemVerilog,Design-and-UVM-verification-for-Memory,7,0,2023-12-22 18:57:59+00:00,[],None
286,https://github.com/Michael200344/FPGA-Risk-World-Domination.git,2023-12-23 20:39:41+00:00,,0,Michael200344/FPGA-Risk-World-Domination,735146417,SystemVerilog,FPGA-Risk-World-Domination,41,0,2023-12-23 20:42:55+00:00,[],None
287,https://github.com/ceaj91/RISC-V_SV.git,2023-12-26 10:40:00+00:00,Implementation of basic RISCVI instrcution set in systemVerilog,0,ceaj91/RISC-V_SV,735878665,SystemVerilog,RISC-V_SV,8,0,2023-12-26 10:50:22+00:00,[],None
288,https://github.com/esdmr/mano-machine.git,2023-12-22 17:03:57+00:00,Mano Machine implementation in SystemVerilog,0,esdmr/mano-machine,734804317,SystemVerilog,mano-machine,122,0,2023-12-24 19:04:20+00:00,"['basic-computer', 'computer-architecture', 'mano-machine', 'systemverilog']",https://api.github.com/licenses/mit
289,https://github.com/benjicruz/ECE-M116C-Honors-Project.git,2023-12-25 00:12:56+00:00,,0,benjicruz/ECE-M116C-Honors-Project,735440651,SystemVerilog,ECE-M116C-Honors-Project,23,0,2023-12-25 00:14:47+00:00,[],None
290,https://github.com/meentallyy/LR1_AP.git,2023-12-26 16:46:02+00:00,,0,meentallyy/LR1_AP,735985574,SystemVerilog,LR1_AP,6,0,2023-12-26 18:40:59+00:00,[],None
291,https://github.com/PopovArtS/cntrl_bram_AXI.git,2023-12-26 18:41:35+00:00,,0,PopovArtS/cntrl_bram_AXI,736017967,SystemVerilog,cntrl_bram_AXI,23,0,2023-12-26 18:43:24+00:00,[],None
292,https://github.com/shtzw965/puvm.git,2023-12-27 22:30:42+00:00,for bash and vcs; set VCS_HOME and UVM_HOME in env; add the dir of vcs to PATH; export WORK_HOME=`pwd`; export SIM_TOOL=VCS; PATH=$WORK_HOME/bin:$PATH;,0,shtzw965/puvm,736432892,SystemVerilog,puvm,118,0,2023-12-28 11:18:38+00:00,[],None
293,https://github.com/ttqureshi/3-stage-pipelined-32-bit-Processor-RISC-V-ISA-.git,2023-12-17 10:09:14+00:00,Implementation of 3 stage pipelined processor based on RISC-V Instruction Set Architecture,0,ttqureshi/3-stage-pipelined-32-bit-Processor-RISC-V-ISA-,732625501,SystemVerilog,3-stage-pipelined-32-bit-Processor-RISC-V-ISA-,2044,0,2023-12-31 05:30:22+00:00,"['hdl', 'processor-design', 'processor', 'riscv']",https://api.github.com/licenses/cc0-1.0
294,https://github.com/Anya620/RISCV-Processor.git,2023-12-24 13:18:26+00:00,Computer Architecture Project (7th semester),0,Anya620/RISCV-Processor,735316117,SystemVerilog,RISCV-Processor,63,0,2023-12-30 19:15:15+00:00,[],None
295,https://github.com/Justin-Meme-Sometimes/UART-RX-TX.git,2023-12-31 09:28:46+00:00,UART RX and TX,0,Justin-Meme-Sometimes/UART-RX-TX,737501459,SystemVerilog,UART-RX-TX,887,0,2023-12-31 09:31:04+00:00,[],None
296,https://github.com/Nepranal/musicdecoder.git,2023-12-26 07:15:59+00:00,A project to be deployed on the FPGA,0,Nepranal/musicdecoder,735823312,SystemVerilog,musicdecoder,22231,0,2023-12-31 09:37:01+00:00,[],None
297,https://github.com/CEGB03/Copia-Proyecto-Arquitectura-I.git,2024-01-01 19:48:33+00:00,,0,CEGB03/Copia-Proyecto-Arquitectura-I,737870827,SystemVerilog,Copia-Proyecto-Arquitectura-I,2365,0,2024-01-01 19:51:46+00:00,[],None
298,https://github.com/MrVineetSharma/uvmproject.git,2024-01-02 06:49:12+00:00,,0,MrVineetSharma/uvmproject,737993972,SystemVerilog,uvmproject,27,0,2024-01-02 07:18:33+00:00,[],None
299,https://github.com/Rahma-Aly/DPRAM.git,2024-01-06 04:06:14+00:00,design and verification of a synchronous dual port ram,0,Rahma-Aly/DPRAM,739631721,SystemVerilog,DPRAM,19,0,2024-01-06 04:11:54+00:00,[],None
300,https://github.com/Ashwin4514/SysVerilog_Cadence.git,2024-01-05 20:35:39+00:00,This code repository contains the code used for the SystemVerilog Certification Labs,0,Ashwin4514/SysVerilog_Cadence,739544857,SystemVerilog,SysVerilog_Cadence,74,0,2024-01-05 21:40:45+00:00,[],None
301,https://github.com/mahmedadawy2013/UVM_Register_Memory.git,2024-01-06 00:24:51+00:00,,0,mahmedadawy2013/UVM_Register_Memory,739593397,SystemVerilog,UVM_Register_Memory,9,0,2024-01-06 00:26:01+00:00,[],None
302,https://github.com/myuan678/systolic_array.git,2023-12-22 03:20:53+00:00,,0,myuan678/systolic_array,734573760,SystemVerilog,systolic_array,14,0,2023-12-22 14:19:52+00:00,[],
303,https://github.com/AdwayPau1/CPUtiny.git,2023-12-31 04:22:06+00:00,My first attempt to build a CPU using Verilog and verified using Icarus Verilog.,0,AdwayPau1/CPUtiny,737449152,SystemVerilog,CPUtiny,18,0,2024-01-10 02:18:39+00:00,[],None
304,https://github.com/MAHANTHADEEKSHA-SB/apb_uvc.git,2024-01-11 19:40:21+00:00,,0,MAHANTHADEEKSHA-SB/apb_uvc,742113815,SystemVerilog,apb_uvc,21,0,2024-01-11 20:01:10+00:00,[],https://api.github.com/licenses/apache-2.0
305,https://github.com/vaibhavambastha/risc-machine-processor.git,2024-01-11 10:26:15+00:00,Designed RISC Machine using Verilog HDL to follow extensive instruction set. Processor pipelined for efficient instruction execution and maximal performance.,0,vaibhavambastha/risc-machine-processor,741891863,SystemVerilog,risc-machine-processor,13,0,2024-01-11 11:05:30+00:00,[],None
306,https://github.com/GST-HUANG/finalproject.git,2024-01-12 13:39:50+00:00,玩家需要解出問題後將值轉成二進位後，用指撥開 關來輸入，若值正確則8X8會亮英文T，且7段顯會 停止計時，蜂鳴器會發出聲音，若再規定時間內沒 有猜出的話則8X8會亮英文F...,0,GST-HUANG/finalproject,742441061,SystemVerilog,finalproject,2,0,2024-01-12 13:40:36+00:00,[],None
307,https://github.com/rishabh4749/Rule_90.git,2024-01-13 11:51:05+00:00,,0,rishabh4749/Rule_90,742795800,SystemVerilog,Rule_90,4,0,2024-01-13 15:08:30+00:00,[],None
308,https://github.com/Arvind-Kumar-Dv/uvm_mem_tb.git,2024-01-17 11:30:09+00:00,mem_tb_sbd,0,Arvind-Kumar-Dv/uvm_mem_tb,744476306,SystemVerilog,uvm_mem_tb,5,0,2024-01-17 11:42:10+00:00,[],None
309,https://github.com/BillyScreezo/KuznInSoC.git,2024-01-20 16:16:55+00:00,,0,BillyScreezo/KuznInSoC,745945092,SystemVerilog,KuznInSoC,25,0,2024-01-21 10:10:57+00:00,[],https://api.github.com/licenses/gpl-3.0
310,https://github.com/laperex/Tiny16.git,2023-12-17 11:48:55+00:00,,0,laperex/Tiny16,732648820,SystemVerilog,Tiny16,202,0,2024-01-21 12:59:34+00:00,[],None
311,https://github.com/MohamedRuby/UVM-for-a-custom-ALU.git,2024-01-05 06:17:07+00:00,UVM environment for an ALU project during the ITI diploma,0,MohamedRuby/UVM-for-a-custom-ALU,739258497,SystemVerilog,UVM-for-a-custom-ALU,302,0,2024-01-05 11:50:16+00:00,[],None
312,https://github.com/Gorruy/debouncer.git,2024-01-20 18:58:31+00:00,,0,Gorruy/debouncer,745991215,SystemVerilog,debouncer,6,0,2024-01-20 18:58:37+00:00,[],None
313,https://github.com/tebina/Simple-UART-SystemVerilog.git,2024-01-24 16:25:00+00:00,,0,tebina/Simple-UART-SystemVerilog,747783435,SystemVerilog,Simple-UART-SystemVerilog,8,0,2024-01-24 16:53:18+00:00,[],https://api.github.com/licenses/mit
314,https://github.com/barrya0/Computer-Hardware-Design.git,2023-12-29 01:45:22+00:00,,0,barrya0/Computer-Hardware-Design,736823616,SystemVerilog,Computer-Hardware-Design,25,0,2023-12-30 03:10:37+00:00,[],None
315,https://github.com/tracymiao111/Pipelined-CPU-Design.git,2023-12-25 21:51:36+00:00,,0,tracymiao111/Pipelined-CPU-Design,735699925,SystemVerilog,Pipelined-CPU-Design,5233,0,2024-01-29 23:11:25+00:00,[],None
316,https://github.com/twliu1/sync_fifo.git,2024-01-13 20:16:24+00:00,A simple sync fifo module in SystemVerilog,0,twliu1/sync_fifo,742938509,SystemVerilog,sync_fifo,1,0,2024-01-13 20:35:03+00:00,[],None
317,https://github.com/ThomasRen2077/Bus_Protocol_Imp.git,2024-01-01 04:47:58+00:00,,0,ThomasRen2077/Bus_Protocol_Imp,737687336,SystemVerilog,Bus_Protocol_Imp,24,0,2024-01-02 01:55:19+00:00,[],None
318,https://github.com/JashwanthAdama/HTAX_Verification.git,2023-12-29 06:46:59+00:00,Verification of HTAX protocol,0,JashwanthAdama/HTAX_Verification,736885256,SystemVerilog,HTAX_Verification,1849,0,2024-03-19 06:22:11+00:00,[],None
319,https://github.com/wwchin/GreedySnake.git,2024-01-07 16:06:10+00:00,This is a verilog Snake game implemented on DE2-115. The final project of NTUEE 2023 fall dclab.,0,wwchin/GreedySnake,740129858,SystemVerilog,GreedySnake,37,0,2024-01-07 16:29:39+00:00,[],None
320,https://github.com/AlaaTaha32/ARM-Pipelined-Processor.git,2023-12-17 02:51:33+00:00,32-bits ARM pipelined processor is implemented using System-Verilog,0,AlaaTaha32/ARM-Pipelined-Processor,732543423,SystemVerilog,ARM-Pipelined-Processor,25,0,2023-12-17 03:04:36+00:00,[],None
321,https://github.com/rrzhang139/fromthetransistor.git,2023-12-18 10:10:48+00:00,,0,rrzhang139/fromthetransistor,732989140,SystemVerilog,fromthetransistor,1144,0,2023-12-18 14:59:07+00:00,[],None
322,https://github.com/nick-pilgrim/Alarm-Clock.git,2023-12-23 17:39:42+00:00,This file contains programming for an FPGA alarm clock,0,nick-pilgrim/Alarm-Clock,735109411,SystemVerilog,Alarm-Clock,3,0,2023-12-23 17:39:56+00:00,[],None
323,https://github.com/JahahShin/ECE-253-verilog-and-assembly.git,2023-12-25 19:41:28+00:00,"LABs for verilog and assembly course which is ECE 293 in University of Toronto, Engineering Science 2nd year.",0,JahahShin/ECE-253-verilog-and-assembly,735678317,SystemVerilog,ECE-253-verilog-and-assembly,5,0,2023-12-25 19:42:23+00:00,[],None
324,https://github.com/Rahma-Aly/ArrayMultiplier_4x5.git,2023-12-26 16:50:23+00:00,implementation of a 4x5 Array Multiplier using verilog. The design is verified by creating the whole environment using SystemVerilog and then using UVM.,0,Rahma-Aly/ArrayMultiplier_4x5,735986872,SystemVerilog,ArrayMultiplier_4x5,11,0,2023-12-26 16:55:17+00:00,[],None
325,https://github.com/ShkalikovDenis4m0/AP_lr.git,2023-12-28 07:05:14+00:00,,0,ShkalikovDenis4m0/AP_lr,736536166,SystemVerilog,AP_lr,8,0,2023-12-28 07:24:07+00:00,[],None
326,https://github.com/apoorvaaaa5/riscv_processor.git,2024-01-02 06:44:45+00:00,,0,apoorvaaaa5/riscv_processor,737992664,SystemVerilog,riscv_processor,18,0,2024-01-02 06:47:59+00:00,[],None
327,https://github.com/AliMaher15/AXI-uvm.git,2023-12-31 22:27:41+00:00,UVM environment using SV for the famous protocol AXI,0,AliMaher15/AXI-uvm,737644871,SystemVerilog,AXI-uvm,836,0,2023-12-31 22:33:55+00:00,[],None
328,https://github.com/mira-sweis/CAM-Lookup.git,2024-01-05 03:15:16+00:00,,0,mira-sweis/CAM-Lookup,739214005,SystemVerilog,CAM-Lookup,1,0,2024-01-05 03:15:43+00:00,[],None
329,https://github.com/jdakrofi/FPGA_OrderBook.git,2024-01-01 15:24:00+00:00,,0,jdakrofi/FPGA_OrderBook,737808330,SystemVerilog,FPGA_OrderBook,17,0,2024-01-03 13:20:47+00:00,[],None
330,https://github.com/maachaa/SystemVerilog.git,2024-01-08 14:02:35+00:00,Verification using systemVerilog,0,maachaa/SystemVerilog,740516789,SystemVerilog,SystemVerilog,23,0,2024-01-08 14:25:54+00:00,[],None
331,https://github.com/falconlive09/8-Bit-ALU.git,2024-01-09 15:58:48+00:00,"Implemented a versatile 8-bit Arithmetic Logic Unit. Supporting operations such as addition, subtraction, multiplication, division, logical shifts, rotations, bit-wise logical AND/OR/XOR/NOR/NAND/XNOR, and comparison operations. ",0,falconlive09/8-Bit-ALU,741056356,SystemVerilog,8-Bit-ALU,31,0,2024-01-09 15:59:38+00:00,[],None
332,https://github.com/miguelJalube/VSE_Lab3.git,2023-12-18 12:30:19+00:00,,0,miguelJalube/VSE_Lab3,733039202,SystemVerilog,VSE_Lab3,1030,0,2023-12-18 12:34:04+00:00,[],None
333,https://github.com/jacobz333/gameboy-emulator.git,2024-01-09 04:39:22+00:00,,0,jacobz333/gameboy-emulator,740794683,SystemVerilog,gameboy-emulator,1801,0,2024-01-09 22:35:14+00:00,[],https://api.github.com/licenses/gpl-3.0
334,https://github.com/LoctStrider/dd-tetris.git,2023-12-31 16:16:15+00:00,,0,LoctStrider/dd-tetris,737584712,SystemVerilog,dd-tetris,1310,0,2024-01-10 03:49:32+00:00,[],None
335,https://github.com/Ghanshyam1409/Protocol-design-and-verification-of-SOC-application-using-AMBA-APB-protocol.git,2024-01-11 06:31:07+00:00,,0,Ghanshyam1409/Protocol-design-and-verification-of-SOC-application-using-AMBA-APB-protocol,741805746,SystemVerilog,Protocol-design-and-verification-of-SOC-application-using-AMBA-APB-protocol,14,0,2024-01-11 06:33:33+00:00,[],None
336,https://github.com/Ayesha-Ilyas/System-Verilog-i.git,2024-01-14 17:58:55+00:00,,0,Ayesha-Ilyas/System-Verilog-i,743228195,SystemVerilog,System-Verilog-i,4,0,2024-01-14 17:59:43+00:00,[],None
337,https://github.com/chibits42/lobotomy-8.git,2024-01-17 14:55:16+00:00,,0,chibits42/lobotomy-8,744562133,SystemVerilog,lobotomy-8,4,0,2024-01-19 20:14:56+00:00,[],None
338,https://github.com/flaviens/cxxrtl-b3.git,2024-01-20 17:32:06+00:00,,0,flaviens/cxxrtl-b3,745967559,SystemVerilog,cxxrtl-b3,1,0,2024-01-20 17:33:03+00:00,[],None
339,https://github.com/Ramagond15/MEMORY.git,2024-01-25 07:09:18+00:00,Verification of memory module,0,Ramagond15/MEMORY,748052999,SystemVerilog,MEMORY,99,0,2024-01-25 07:15:27+00:00,[],None
340,https://github.com/JiteshNayak2004/HDL_PRACTICE.git,2024-01-19 17:22:06+00:00,contains simple basic block implementation in various hdl's,0,JiteshNayak2004/HDL_PRACTICE,745598197,SystemVerilog,HDL_PRACTICE,3,0,2024-01-21 06:52:41+00:00,[],None
341,https://github.com/axyrai/axi4_testbench.git,2024-01-25 05:14:08+00:00,,4,axyrai/axi4_testbench,748019211,SystemVerilog,axi4_testbench,36630,0,2024-02-07 06:01:13+00:00,[],None
342,https://github.com/SK-bod/soc-performance-analyzer.git,2024-01-12 22:42:35+00:00,PL:,0,SK-bod/soc-performance-analyzer,742626841,SystemVerilog,soc-performance-analyzer,16436,0,2024-02-11 17:26:24+00:00,[],None
343,https://github.com/edgarherrera03/ASCON128.git,2024-01-21 12:54:50+00:00,Simplified version of the Ascon-128 encryption algorithm coded in SystemVerilog,0,edgarherrera03/ASCON128,746224945,SystemVerilog,ASCON128,172,0,2024-04-05 13:54:39+00:00,[],None
344,https://github.com/neildeo05/nnoc.git,2024-01-11 18:02:53+00:00,Experimental tile-based accelerator and subgraph partitioner,1,neildeo05/nnoc,742076913,SystemVerilog,nnoc,165,0,2024-02-06 16:01:41+00:00,[],None
345,https://github.com/Pasha-2033/monolit.git,2024-01-02 14:45:44+00:00,,0,Pasha-2033/monolit,738150037,SystemVerilog,monolit,11900,0,2024-01-02 14:52:48+00:00,[],None
346,https://github.com/meentallyy/LR2_AP.git,2023-12-28 01:37:01+00:00,,0,meentallyy/LR2_AP,736464432,SystemVerilog,LR2_AP,3,0,2023-12-28 01:38:55+00:00,[],None
347,https://github.com/ManalHasan/COLOR-HUNT.git,2023-12-18 09:00:49+00:00,DLD Project on verilog using basys3 FPGA,0,ManalHasan/COLOR-HUNT,732963010,SystemVerilog,COLOR-HUNT,628,0,2023-12-18 10:41:30+00:00,[],None
348,https://github.com/mahmedadawy2013/SV_Counter.git,2024-01-06 00:30:56+00:00,,0,mahmedadawy2013/SV_Counter,739594476,SystemVerilog,SV_Counter,324,0,2024-01-06 00:31:59+00:00,[],None
349,https://github.com/AlphaAnas/Foosball-basys-3-game.git,2023-12-21 04:50:16+00:00,"this is a game made using basys 3 board FPGA, using vivvado. This game uses keyboard as an input and dynamics like of foosball",0,AlphaAnas/Foosball-basys-3-game,734188809,SystemVerilog,Foosball-basys-3-game,6865,0,2023-12-21 04:53:15+00:00,[],None
350,https://github.com/GaalElbaz/twoBitSynchronousCounter.git,2024-01-11 13:49:37+00:00,"A two-bit synchronous counter is a digital circuit that counts in binary from 00 to 11 using two flip-flops. It operates in sync with a clock signal, advancing its count on each clock edge. This type of counter is synchronous, meaning that the flip-flops change states simultaneously, ensuring proper timing and avoiding glitches.",0,GaalElbaz/twoBitSynchronousCounter,741971611,SystemVerilog,twoBitSynchronousCounter,97,0,2024-01-14 08:04:34+00:00,[],None
351,https://github.com/Weiss-F/MIPS.git,2024-01-01 12:38:25+00:00,Verilog MIPS Processor,0,Weiss-F/MIPS,737769501,SystemVerilog,MIPS,7,0,2024-01-12 11:35:18+00:00,[],None
352,https://github.com/rishabh4749/Shift_Register.git,2024-01-13 05:31:26+00:00,,0,rishabh4749/Shift_Register,742703113,SystemVerilog,Shift_Register,4,0,2024-01-13 14:59:34+00:00,[],None
353,https://github.com/hieupt12062001/h266_affine_hieu_nhat.git,2024-01-16 07:43:55+00:00,Do an tot nghiep,0,hieupt12062001/h266_affine_hieu_nhat,743886500,SystemVerilog,h266_affine_hieu_nhat,2897,0,2024-01-17 10:43:36+00:00,[],None
354,https://github.com/flaviens/icarus-b1.git,2024-01-16 16:48:26+00:00,Runtime bug in Icarus Verilog,0,flaviens/icarus-b1,744115845,SystemVerilog,icarus-b1,2,0,2024-01-16 16:49:03+00:00,[],None
355,https://github.com/yoon123seul/CAST_DMA.git,2024-01-12 05:33:48+00:00,,0,yoon123seul/CAST_DMA,742272534,SystemVerilog,CAST_DMA,421,0,2024-01-12 05:38:15+00:00,[],None
356,https://github.com/ilyakupriyan/arch_risc-16.git,2024-01-24 18:37:27+00:00,,0,ilyakupriyan/arch_risc-16,747839408,SystemVerilog,arch_risc-16,808,0,2024-01-24 20:15:41+00:00,[],None
357,https://github.com/ZakiyaAbuMurra/Single-level-Cache.git,2024-01-16 11:46:59+00:00,,0,ZakiyaAbuMurra/Single-level-Cache,743979928,SystemVerilog,Single-level-Cache,6,0,2024-01-26 22:23:20+00:00,[],None
358,https://github.com/Rubayet13/SPI-systemverilog.git,2024-01-22 06:29:51+00:00,,0,Rubayet13/SPI-systemverilog,746510128,SystemVerilog,SPI-systemverilog,284,0,2024-02-03 17:32:08+00:00,[],None
359,https://github.com/AndreaCastronovo/APB_BUS_SYSTEM.git,2023-12-18 10:07:41+00:00,"Exercises from ""Lab of Digital Electronics""",0,AndreaCastronovo/APB_BUS_SYSTEM,732987918,SystemVerilog,APB_BUS_SYSTEM,562,0,2023-12-18 10:11:52+00:00,[],https://api.github.com/licenses/gpl-3.0
360,https://github.com/attar8/Fifo-module-using-UVM.git,2023-12-18 07:39:57+00:00,,0,attar8/Fifo-module-using-UVM,732935201,SystemVerilog,Fifo-module-using-UVM,372,0,2023-12-18 07:41:05+00:00,[],None
361,https://github.com/andycha1234/Verilog.git,2024-01-12 11:00:49+00:00,,0,andycha1234/Verilog,742384361,SystemVerilog,Verilog,248883,0,2024-03-26 02:30:37+00:00,[],None
362,https://github.com/Gorruy/serialaizer.git,2023-12-27 19:45:19+00:00,,0,Gorruy/serialaizer,736397919,SystemVerilog,serialaizer,12807,0,2023-12-29 15:22:25+00:00,[],None
363,https://github.com/ruchit-422/pipelined_convolution.git,2024-01-18 05:31:15+00:00,,0,ruchit-422/pipelined_convolution,744839389,SystemVerilog,pipelined_convolution,1727,0,2024-01-18 05:34:46+00:00,[],None
364,https://github.com/RavinderReddy741/FIFO_SVA_PROJECT.git,2024-01-18 17:09:15+00:00,,0,RavinderReddy741/FIFO_SVA_PROJECT,745114688,SystemVerilog,FIFO_SVA_PROJECT,281,0,2024-01-18 18:50:26+00:00,[],None
365,https://github.com/mbcruz96/Cache-Simulator.git,2024-01-16 21:20:28+00:00,Multi-level cache software and hardware implementations,0,mbcruz96/Cache-Simulator,744220551,SystemVerilog,Cache-Simulator,16811,0,2024-01-16 21:34:08+00:00,[],None
366,https://github.com/rishabh4749/Single_Edge_Detector.git,2024-01-11 13:07:58+00:00,,0,rishabh4749/Single_Edge_Detector,741954495,SystemVerilog,Single_Edge_Detector,5,0,2024-01-13 14:57:45+00:00,[],None
367,https://github.com/GaalElbaz/Get-Started-with-Basys-3-Board.git,2024-01-23 09:58:49+00:00,"This tutorial provides a step-by-step guide to creating a simple FPGA project on the Basys 3 board using Vivado Xilinx. The project involves implementing an AND gate in SystemVerilog, connecting it to two switches, and controlling the state of an LED based on the switch inputs.",0,GaalElbaz/Get-Started-with-Basys-3-Board,747119872,SystemVerilog,Get-Started-with-Basys-3-Board,38,0,2024-01-23 10:35:27+00:00,[],None
368,https://github.com/featherweight-vip/fwvip-wb.git,2024-01-22 15:06:54+00:00,VIP for Wishbone bus protocol,0,featherweight-vip/fwvip-wb,746731042,SystemVerilog,fwvip-wb,818,0,2024-01-23 15:37:58+00:00,[],https://api.github.com/licenses/apache-2.0
369,https://github.com/pat0kamba/10-bit-Processor-With-Immediate-Instructions.git,2024-01-18 23:38:49+00:00,,0,pat0kamba/10-bit-Processor-With-Immediate-Instructions,745248457,SystemVerilog,10-bit-Processor-With-Immediate-Instructions,14,0,2024-02-06 15:44:30+00:00,[],None
370,https://github.com/Mertozkaya21/UART-protocol.git,2024-01-15 16:45:05+00:00,"UART is a widely used serial communication protocol that allows for bidirectional data transfer between devices. This implementation provides functionality to transmit and receive data serially between a microcontroller and another device, such as a computer.",0,Mertozkaya21/UART-protocol,743632367,SystemVerilog,UART-protocol,243,0,2024-02-09 20:37:10+00:00,[],None
371,https://github.com/johnrscott/hdl_lib.git,2024-01-15 20:08:36+00:00,Library of Verilog Modules for FPGA Designs,0,johnrscott/hdl_lib,743706385,SystemVerilog,hdl_lib,205,0,2024-01-20 14:30:47+00:00,[],https://api.github.com/licenses/gpl-3.0
372,https://github.com/galaxybabyy/LABA_SAP_1.git,2023-12-20 17:39:46+00:00,,0,galaxybabyy/LABA_SAP_1,734031917,SystemVerilog,LABA_SAP_1,6,0,2023-12-20 18:23:11+00:00,[],None
373,https://github.com/kennethcollins138/Pipeline-Processor.git,2023-12-22 05:31:20+00:00,"For this project, I was tasked to create a Pipeline Processor in the Risc-V. This project was given by Dr.Sat Garcia and was inspired by David and Sarah Harris.",0,kennethcollins138/Pipeline-Processor,734600679,SystemVerilog,Pipeline-Processor,13,0,2023-12-22 05:32:49+00:00,[],None
374,https://github.com/SupunDK/matrix-multiplier-and-accumulator.git,2023-12-24 13:58:55+00:00,Matrix multiplier and accumulator unit that can multiply two matrices of any size,0,SupunDK/matrix-multiplier-and-accumulator,735325977,SystemVerilog,matrix-multiplier-and-accumulator,3,0,2023-12-24 14:00:31+00:00,[],https://api.github.com/licenses/mit
375,https://github.com/ldiatrvy/sapr.git,2023-12-27 23:54:50+00:00,,0,ldiatrvy/sapr,736447040,SystemVerilog,sapr,11,0,2023-12-28 00:24:20+00:00,[],None
376,https://github.com/Katerinalex001/laba_1-_SAP.git,2023-12-28 05:00:35+00:00,,0,Katerinalex001/laba_1-_SAP,736504668,SystemVerilog,laba_1-_SAP,21,0,2023-12-28 05:08:21+00:00,[],None
377,https://github.com/gbsurendar/VLSI_Project.git,2023-12-27 11:30:52+00:00,,0,gbsurendar/VLSI_Project,736246207,SystemVerilog,VLSI_Project,2,0,2023-12-27 11:37:05+00:00,[],None
378,https://github.com/iamshaheer12/Three_Stage_Pipeline.git,2023-12-30 17:49:11+00:00,,0,iamshaheer12/Three_Stage_Pipeline,737347949,SystemVerilog,Three_Stage_Pipeline,614,0,2023-12-30 17:50:26+00:00,[],None
379,https://github.com/IqraMuzaffar/RiscV-3-stage.git,2023-12-30 16:27:45+00:00,,0,IqraMuzaffar/RiscV-3-stage,737327987,SystemVerilog,RiscV-3-stage,80,0,2023-12-30 17:01:10+00:00,[],None
380,https://github.com/Sheikh-Khansa/3-Staged-Pipelined-RISC-V-Processor.git,2023-12-24 10:36:36+00:00,"This repository features a 3-stage pipelined RISC-V processor, designed for efficient instruction execution. Based on the RISC-V ISA, it balances performance and simplicity with Instruction Fetch (IF), Instruction Decode (ID) and Execute (EX), and Memory(MEM) and Write Back(WB) stages. ",0,Sheikh-Khansa/3-Staged-Pipelined-RISC-V-Processor,735280363,SystemVerilog,3-Staged-Pipelined-RISC-V-Processor,657,0,2023-12-30 19:49:28+00:00,[],None
381,https://github.com/Fatim-Sohail/RSC-V-Three-Stage-Pipelined-Processor.git,2023-12-17 17:55:56+00:00,,0,Fatim-Sohail/RSC-V-Three-Stage-Pipelined-Processor,732750740,SystemVerilog,RSC-V-Three-Stage-Pipelined-Processor,151,0,2023-12-31 09:53:32+00:00,[],None
382,https://github.com/Mbonyimfura/single_cycle_PS_processor.git,2024-01-03 19:01:43+00:00,,0,Mbonyimfura/single_cycle_PS_processor,738667506,SystemVerilog,single_cycle_PS_processor,18,0,2024-01-03 19:04:25+00:00,[],None
383,https://github.com/ashutosh9991/systemverilog.git,2024-01-06 02:48:57+00:00,,0,ashutosh9991/systemverilog,739617321,SystemVerilog,systemverilog,1,0,2024-01-06 02:51:11+00:00,[],None
384,https://github.com/SKrishnaPrasad-10/Design-of-32-bit-Low-Power-Pipelined-RISC-Processor.git,2024-01-06 21:24:22+00:00,"Implementation a power-efficient, high-speed 32-bit RISC based processor with a 5-stage pipeline utilizing the MIPS Instruction Set Architecture, tailored for low-power applications.",0,SKrishnaPrasad-10/Design-of-32-bit-Low-Power-Pipelined-RISC-Processor,739891611,SystemVerilog,Design-of-32-bit-Low-Power-Pipelined-RISC-Processor,19,0,2024-01-06 21:26:46+00:00,[],None
385,https://github.com/Rossetas/RVfpga.git,2023-12-20 03:18:11+00:00,,0,Rossetas/RVfpga,733748838,SystemVerilog,RVfpga,24544,0,2023-12-29 03:48:33+00:00,[],None
386,https://github.com/ruwayd99/Reduced-Instruction-Set-Computer.git,2024-01-03 02:35:06+00:00,,0,ruwayd99/Reduced-Instruction-Set-Computer,738344718,SystemVerilog,Reduced-Instruction-Set-Computer,481,0,2024-01-03 02:36:40+00:00,[],None
387,https://github.com/GaalElbaz/halfAdder.git,2024-01-09 18:12:34+00:00,A half adder is a binary addition circuit with two inputs (A and B). It produces a sum (S) by XORing A and B and a carry (C) by ANDing them. It handles basic addition of two bits without considering any carry from previous stages.,0,GaalElbaz/halfAdder,741113463,SystemVerilog,halfAdder,136,0,2024-01-09 18:14:52+00:00,[],None
388,https://github.com/arruk/MIPS_pipeline.git,2024-01-09 20:46:18+00:00,,0,arruk/MIPS_pipeline,741166147,SystemVerilog,MIPS_pipeline,9,0,2024-01-09 21:46:01+00:00,[],None
389,https://github.com/clancy-mitchell/uvm-uart-tx.git,2024-01-10 06:42:34+00:00,Verification of a UART TX module using UVM and Cadence Xcelium,0,clancy-mitchell/uvm-uart-tx,741322722,SystemVerilog,uvm-uart-tx,22,0,2024-01-10 06:49:48+00:00,[],None
390,https://github.com/0xoleg/chidesignschool_tasks.git,2024-01-09 16:06:57+00:00,,0,0xoleg/chidesignschool_tasks,741059724,SystemVerilog,chidesignschool_tasks,25,0,2024-01-09 21:43:14+00:00,[],None
391,https://github.com/MahantaTalakal/Prefix-Adder_32bit.git,2024-01-15 03:15:53+00:00,,0,MahantaTalakal/Prefix-Adder_32bit,743351093,SystemVerilog,Prefix-Adder_32bit,3,0,2024-01-15 03:17:15+00:00,[],None
392,https://github.com/GaalElbaz/bcdCounter.git,2024-01-14 12:47:40+00:00,"A BCD (Binary-Coded Decimal) counter is a type of electronic counter circuit used in digital electronics. In BCD counting, each decimal digit is represented by its 4-bit binary equivalent. This means that in a BCD counter, the count is represented in binary form, where each digit of the count is encoded using four binary bits.",0,GaalElbaz/bcdCounter,743134563,SystemVerilog,bcdCounter,47,0,2024-01-15 11:03:09+00:00,[],None
393,https://github.com/pogoreli/TPU.git,2023-12-22 22:36:47+00:00,,0,pogoreli/TPU,734881401,SystemVerilog,TPU,69,0,2023-12-22 22:48:13+00:00,[],https://api.github.com/licenses/gpl-3.0
394,https://github.com/TJ178/ece113dw_project.git,2024-01-21 06:03:17+00:00,,0,TJ178/ece113dw_project,746126458,SystemVerilog,ece113dw_project,14256,0,2024-02-23 05:58:01+00:00,[],None
395,https://github.com/Mohsannaeem/apb_uvc.git,2023-12-18 14:04:13+00:00,,0,Mohsannaeem/apb_uvc,733075553,SystemVerilog,apb_uvc,40,0,2023-12-18 14:18:00+00:00,[],https://api.github.com/licenses/apache-2.0
396,https://github.com/Sushma-Soni/system_verilog_practice.git,2024-01-15 10:36:43+00:00,,0,Sushma-Soni/system_verilog_practice,743483483,SystemVerilog,system_verilog_practice,11,0,2024-02-21 13:30:20+00:00,[],https://api.github.com/licenses/apache-2.0
397,https://github.com/Gorruy/deserializer.git,2024-01-05 06:31:33+00:00,,0,Gorruy/deserializer,739262862,SystemVerilog,deserializer,7954,0,2024-01-20 18:57:26+00:00,[],None
398,https://github.com/gvillanovanm/svlog-adder-amba.git,2024-01-19 13:55:16+00:00,,0,gvillanovanm/svlog-adder-amba,745513199,SystemVerilog,svlog-adder-amba,1165,0,2024-01-19 16:52:44+00:00,[],None
399,https://github.com/Gorruy/bit_population_counter.git,2024-01-15 15:37:40+00:00,,0,Gorruy/bit_population_counter,743605424,SystemVerilog,bit_population_counter,26,0,2024-01-18 18:56:58+00:00,[],None
400,https://github.com/BLANK-1908/ECE593_Pre_Silicon.git,2024-01-25 03:45:57+00:00,,0,BLANK-1908/ECE593_Pre_Silicon,747996744,SystemVerilog,ECE593_Pre_Silicon,362,0,2024-02-03 18:26:40+00:00,[],None
401,https://github.com/ashiaotw/100DaysOfRTL.git,2024-01-07 21:03:15+00:00,,0,ashiaotw/100DaysOfRTL,740213802,SystemVerilog,100DaysOfRTL,30,0,2024-01-07 21:05:43+00:00,[],None
402,https://github.com/GaalElbaz/PulseEveryThirdClock.git,2024-01-09 09:22:30+00:00,Describing the behavior of producing a pulse every third clock edge.,0,GaalElbaz/PulseEveryThirdClock,740888331,SystemVerilog,PulseEveryThirdClock,33,0,2024-01-09 09:25:31+00:00,[],None
403,https://github.com/RakshithaRShettigar/AXI_Testbench.git,2024-01-09 04:38:29+00:00,,0,RakshithaRShettigar/AXI_Testbench,740794466,SystemVerilog,AXI_Testbench,2,0,2024-01-10 08:31:10+00:00,[],None
404,https://github.com/oceanchad/HDLBits_Luca.git,2024-01-03 15:54:08+00:00,Practice for HDLBits,0,oceanchad/HDLBits_Luca,738601601,SystemVerilog,HDLBits_Luca,8,0,2024-01-10 11:31:49+00:00,[],https://api.github.com/licenses/apache-2.0
405,https://github.com/SammyK12345/Viterbi-Decoder.git,2024-01-03 03:59:08+00:00,Created a Viterbi decoder to decode messages with potential errors in them. I wrote a testbench and encoder to create intentional errors in the encoding to test the decoders accuracy.,0,SammyK12345/Viterbi-Decoder,738364301,SystemVerilog,Viterbi-Decoder,190,0,2024-01-03 04:00:12+00:00,[],None
406,https://github.com/bzkarim250/A-single-cycle-MIPS-processor-in-system-Verilog.git,2024-01-03 16:19:52+00:00,,0,bzkarim250/A-single-cycle-MIPS-processor-in-system-Verilog,738610876,SystemVerilog,A-single-cycle-MIPS-processor-in-system-Verilog,104,0,2024-01-03 16:34:53+00:00,[],None
407,https://github.com/bonane123/verilog.git,2024-01-03 19:16:42+00:00,,0,bonane123/verilog,738672080,SystemVerilog,verilog,3,0,2024-01-03 19:21:21+00:00,[],None
408,https://github.com/Lucalini/CPE233FinalProject.git,2024-01-04 01:13:36+00:00,"This project was the culmination of my work in CPE 233. This Verilog code fully models the RISCV MCU architecture as shown in the attatched diagram. Additionally, this project includes an assembly lanuage program I wrote which multiplexes the display on our FPGA board using interrupts and scrolls a message using the center button. ",0,Lucalini/CPE233FinalProject,738756226,SystemVerilog,CPE233FinalProject,202,0,2024-01-04 01:28:00+00:00,[],None
409,https://github.com/kmatelski3/pipelineCPU.git,2024-01-04 04:15:14+00:00,,0,kmatelski3/pipelineCPU,738796675,SystemVerilog,pipelineCPU,71,0,2024-01-04 04:16:50+00:00,[],None
410,https://github.com/sebastianhorvath/qick_atomic.git,2023-12-21 20:51:24+00:00,,0,sebastianhorvath/qick_atomic,734497540,SystemVerilog,qick_atomic,7597,0,2024-01-04 16:22:04+00:00,[],None
411,https://github.com/JellyCo9064/Intro-to-Digital-Design_CSE369.git,2024-01-05 01:43:57+00:00,Class project files for UW 369 - Intro to Digital Design. Targeted for the Altera DE1-SoC.,0,JellyCo9064/Intro-to-Digital-Design_CSE369,739193694,SystemVerilog,Intro-to-Digital-Design_CSE369,68861,0,2024-01-05 01:46:14+00:00,[],None
412,https://github.com/MahmoudMohamed9988/Microchip_SPI_Master.git,2024-01-13 16:02:45+00:00,Implement a complete UVM testbench and design for SPI_Master,0,MahmoudMohamed9988/Microchip_SPI_Master,742868999,SystemVerilog,Microchip_SPI_Master,318,0,2024-01-13 16:22:07+00:00,[],None
413,https://github.com/rishabh4749/DFF_Asynchronous_Reset.git,2023-12-29 04:50:26+00:00,,0,rishabh4749/DFF_Asynchronous_Reset,736858404,SystemVerilog,DFF_Asynchronous_Reset,4,0,2024-01-13 14:40:04+00:00,[],None
414,https://github.com/Platun0v/game_of_life_fpga.git,2023-12-18 06:09:48+00:00,,0,Platun0v/game_of_life_fpga,732906682,SystemVerilog,game_of_life_fpga,28,0,2023-12-18 06:14:30+00:00,[],None
415,https://github.com/ani171/ALU.git,2023-12-29 14:20:13+00:00,,0,ani171/ALU,737006990,SystemVerilog,ALU,22,0,2023-12-29 14:24:00+00:00,[],None
416,https://github.com/Naderatef10/UVM_of_Memory.git,2024-01-01 13:09:54+00:00,UVM TB for a simple memory module as a practice,0,Naderatef10/UVM_of_Memory,737776392,SystemVerilog,UVM_of_Memory,8,0,2024-01-01 13:15:31+00:00,[],None
417,https://github.com/NoorUlEmaan/RISCV-3Stage-Pipelining.git,2023-12-30 18:24:38+00:00,,0,NoorUlEmaan/RISCV-3Stage-Pipelining,737355812,SystemVerilog,RISCV-3Stage-Pipelining,60,0,2023-12-30 18:54:52+00:00,[],None
418,https://github.com/aamirbutt011/CA_PROJECT.git,2023-12-30 18:44:09+00:00,new project,0,aamirbutt011/CA_PROJECT,737359954,SystemVerilog,CA_PROJECT,302,0,2023-12-30 18:46:35+00:00,[],None
419,https://github.com/pjaggi/Projects.git,2023-12-16 03:19:15+00:00,,0,pjaggi/Projects,732244842,SystemVerilog,Projects,5446,0,2023-12-16 04:25:55+00:00,[],None
420,https://github.com/suma-dv/And_gate.git,2024-01-17 09:30:45+00:00,,0,suma-dv/And_gate,744428877,SystemVerilog,And_gate,3,0,2024-01-17 09:37:21+00:00,[],None
421,https://github.com/zierenclark/TrafficLight_Simulated.git,2024-01-09 00:38:34+00:00,Goal: Design Logic Circuit that could be used for a traffic light and simulate circuit within Logism and Verilog code and then build,0,zierenclark/TrafficLight_Simulated,740735665,SystemVerilog,TrafficLight_Simulated,21,0,2024-01-12 21:57:15+00:00,[],None
422,https://github.com/echacont/vnsynth-dev.git,2024-01-05 19:03:11+00:00,Development of sound synthesizer and sampler based on veervolf and nexys A7,0,echacont/vnsynth-dev,739519129,SystemVerilog,vnsynth-dev,3672,0,2024-01-20 03:25:36+00:00,[],None
423,https://github.com/jmsf3/IF674-RISCV.git,2024-01-20 00:13:04+00:00,Projeto da cadeira de Infraestrutura de Hardware do CIn-UFPE para implementação do conjunto de instruções (ISA) de um processador RISC-V usando SystemVerilog.,2,jmsf3/IF674-RISCV,745718253,SystemVerilog,IF674-RISCV,145,0,2024-02-28 12:07:09+00:00,[],None
424,https://github.com/MorZao/luzao.git,2024-01-10 05:09:53+00:00,,0,MorZao/luzao,741294999,SystemVerilog,luzao,15567,0,2024-01-10 05:24:14+00:00,[],None
425,https://github.com/lucahhot/CE387-Assignments.git,2024-01-04 19:03:41+00:00,,0,lucahhot/CE387-Assignments,739096386,SystemVerilog,CE387-Assignments,148720,0,2024-03-01 04:24:57+00:00,[],None
426,https://github.com/RaghavaBathula/Asynchronous-FIFO_PreSi.git,2024-01-25 23:22:18+00:00,,0,RaghavaBathula/Asynchronous-FIFO_PreSi,748417948,SystemVerilog,Asynchronous-FIFO_PreSi,5565,0,2024-02-02 21:12:27+00:00,[],None
427,https://github.com/CSCE-689-SP24/lab-4.git,2023-12-29 19:38:38+00:00,,3,CSCE-689-SP24/lab-4,737090623,SystemVerilog,lab-4,165,0,2024-04-01 16:23:53+00:00,[],None
428,https://github.com/langye11/LAB3.git,2023-12-16 10:04:18+00:00,,0,langye11/LAB3,732327744,SystemVerilog,LAB3,2,0,2023-12-16 10:05:36+00:00,[],None
429,https://github.com/vishalvp123/Clock-time-period-checker.git,2023-12-19 06:51:51+00:00,Checker to verify the clock time period,0,vishalvp123/Clock-time-period-checker,733363966,SystemVerilog,Clock-time-period-checker,2,0,2023-12-19 06:55:44+00:00,[],None
430,https://github.com/SammyK12345/Microprocessor.git,2023-12-19 20:15:02+00:00,,0,SammyK12345/Microprocessor,733651636,SystemVerilog,Microprocessor,30,0,2023-12-19 20:25:48+00:00,[],None
431,https://github.com/FraserJordan1/Invaders-of-Space.git,2023-12-19 22:02:42+00:00,"(FPGA - Verilog)  Incorporation of a classic video game called, Space Invaders",0,FraserJordan1/Invaders-of-Space,733679518,SystemVerilog,Invaders-of-Space,1664,0,2023-12-19 22:18:05+00:00,[],None
432,https://github.com/deboradls/circuitos.sv.git,2023-12-24 18:42:49+00:00,,0,deboradls/circuitos.sv,735391018,SystemVerilog,circuitos.sv,7,0,2023-12-24 19:03:23+00:00,[],None
433,https://github.com/verdant-crocodile/sapr.git,2023-12-21 05:22:44+00:00,,0,verdant-crocodile/sapr,734196891,SystemVerilog,sapr,15,0,2023-12-27 18:50:07+00:00,[],None
434,https://github.com/KsuPtash/-.git,2023-12-27 18:49:57+00:00,,0,KsuPtash/-,736384186,SystemVerilog,-,11,0,2023-12-28 10:38:34+00:00,[],None
435,https://github.com/m-haris-n/3-Stage-Pipelined-RISC-V-Processor.git,2023-12-30 12:38:48+00:00,,0,m-haris-n/3-Stage-Pipelined-RISC-V-Processor,737273508,SystemVerilog,3-Stage-Pipelined-RISC-V-Processor,93,0,2023-12-30 12:40:34+00:00,[],None
436,https://github.com/OkraGrey/5-Staged-Pipelined-Processor.git,2023-12-30 16:28:50+00:00,,0,OkraGrey/5-Staged-Pipelined-Processor,737328259,SystemVerilog,5-Staged-Pipelined-Processor,115,0,2023-12-30 17:16:49+00:00,[],None
437,https://github.com/abhaytiwari10/ps2-protocol.git,2023-12-21 19:14:33+00:00,,0,abhaytiwari10/ps2-protocol,734472770,SystemVerilog,ps2-protocol,2,0,2023-12-21 19:15:32+00:00,[],None
438,https://github.com/DOKurilova/laba2SAPR.git,2023-12-20 20:33:01+00:00,,0,DOKurilova/laba2SAPR,734083022,SystemVerilog,laba2SAPR,7,0,2023-12-20 20:34:15+00:00,[],None
439,https://github.com/kanuar/FFVDD_SEM5.git,2023-12-20 06:19:32+00:00,,0,kanuar/FFVDD_SEM5,733792850,SystemVerilog,FFVDD_SEM5,84,0,2023-12-20 10:49:37+00:00,[],https://api.github.com/licenses/agpl-3.0
440,https://github.com/despotovis/Project-Image-Rotation.git,2023-12-22 07:58:31+00:00,,0,despotovis/Project-Image-Rotation,734639697,SystemVerilog,Project-Image-Rotation,2508,0,2023-12-22 08:42:23+00:00,[],None
441,https://github.com/crispy245/spi.git,2024-01-02 14:23:58+00:00,,0,crispy245/spi,738142043,SystemVerilog,spi,4,0,2024-01-02 14:24:03+00:00,[],None
442,https://github.com/HITESHKAHIR/Simple-Adder-verification-using-System-Verilog-and-UVM.git,2024-01-04 08:13:48+00:00,,0,HITESHKAHIR/Simple-Adder-verification-using-System-Verilog-and-UVM,738863939,SystemVerilog,Simple-Adder-verification-using-System-Verilog-and-UVM,6,0,2024-01-04 08:20:39+00:00,[],None
443,https://github.com/EmeraldMerchant/fpga_final.git,2024-01-03 10:07:56+00:00,,0,EmeraldMerchant/fpga_final,738475377,SystemVerilog,fpga_final,5102,0,2024-01-03 10:17:03+00:00,[],None
444,https://github.com/AravindK25/Router_1x3-RTL_Design_Verification.git,2024-01-08 11:20:20+00:00,"The router accepts data packets on a single 8-bit port and routes them to one of the three output channels, channel0, channel1 and channel2.",0,AravindK25/Router_1x3-RTL_Design_Verification,740449515,SystemVerilog,Router_1x3-RTL_Design_Verification,28,0,2024-01-08 11:33:55+00:00,[],None
445,https://github.com/quratulaincodes/RISC-V-3-Stage-Pipelined-Processor.git,2023-12-30 14:16:08+00:00,,0,quratulaincodes/RISC-V-3-Stage-Pipelined-Processor,737295978,SystemVerilog,RISC-V-3-Stage-Pipelined-Processor,36,0,2023-12-30 14:25:41+00:00,[],None
446,https://github.com/nehawaghmore/Layered-Testbench-For-JK-Flipflop.git,2024-01-10 15:26:07+00:00,,0,nehawaghmore/Layered-Testbench-For-JK-Flipflop,741527355,SystemVerilog,Layered-Testbench-For-JK-Flipflop,12,0,2024-01-10 15:28:59+00:00,[],None
447,https://github.com/rishii2098/-Verification-of-I2C-Inter-Integrated-Circuit-Communication-protocol-using-SystemVerilog.git,2024-01-10 23:32:22+00:00,,0,rishii2098/-Verification-of-I2C-Inter-Integrated-Circuit-Communication-protocol-using-SystemVerilog,741698078,SystemVerilog,-Verification-of-I2C-Inter-Integrated-Circuit-Communication-protocol-using-SystemVerilog,7,0,2024-01-10 23:36:00+00:00,[],None
448,https://github.com/JJcompE/Six_Instruction_Programmable_Processor_Design.git,2024-01-07 02:34:17+00:00,DE2 FPGA,0,JJcompE/Six_Instruction_Programmable_Processor_Design,739942387,SystemVerilog,Six_Instruction_Programmable_Processor_Design,23,0,2024-02-10 04:15:41+00:00,[],None
449,https://github.com/natelannan-osu/dldLab2_Spring24.git,2024-01-16 05:12:51+00:00,Lab 2 for Digital Logic Design Spring 24,2,natelannan-osu/dldLab2_Spring24,743839087,SystemVerilog,dldLab2_Spring24,21444,0,2024-02-04 03:46:35+00:00,[],https://api.github.com/licenses/mit
450,https://github.com/shaolab1/Distributed-Coincidence-Processors.git,2024-01-05 18:36:54+00:00,This folder contains the codes and documents of DCP,0,shaolab1/Distributed-Coincidence-Processors,739511476,SystemVerilog,Distributed-Coincidence-Processors,33107,0,2024-02-20 19:10:59+00:00,[],None
451,https://github.com/bwnace/bwnace-verilog.git,2024-01-16 00:50:36+00:00,,0,bwnace/bwnace-verilog,743775678,SystemVerilog,bwnace-verilog,10,0,2024-01-17 01:36:33+00:00,[],None
452,https://github.com/HJARDINE625/https-github.com-byu-ecen323-winter2024-323-labs-HJARDINE625.git,2024-01-17 03:30:55+00:00,,0,HJARDINE625/https-github.com-byu-ecen323-winter2024-323-labs-HJARDINE625,744316148,SystemVerilog,https-github.com-byu-ecen323-winter2024-323-labs-HJARDINE625,3807,0,2024-01-19 03:54:56+00:00,[],None
453,https://github.com/nikul09/Byte-addressable-single-port-RAM.git,2024-01-19 11:57:22+00:00,,0,nikul09/Byte-addressable-single-port-RAM,745468002,SystemVerilog,Byte-addressable-single-port-RAM,24,0,2024-01-19 12:00:40+00:00,[],None
454,https://github.com/FaisalShahkar/32bit_Counter.git,2024-01-22 08:56:53+00:00,,0,FaisalShahkar/32bit_Counter,746560497,SystemVerilog,32bit_Counter,2,0,2024-01-22 08:58:03+00:00,[],None
455,https://github.com/GaalElbaz/tFlopTwoBitCounter.git,2024-01-14 09:07:43+00:00," A 2-bit counter using T Flip-Flops is a digital circuit that counts in binary from 00 to 11. Each T Flip-Flop represents one bit of the counter, and the toggling behavior of the T Flip-Flop allows the counter to progress through its binary states",0,GaalElbaz/tFlopTwoBitCounter,743080175,SystemVerilog,tFlopTwoBitCounter,41,0,2024-01-14 09:38:43+00:00,[],None
456,https://github.com/badudum/RISC-cpu.git,2023-12-24 07:11:47+00:00,,0,badudum/RISC-cpu,735239685,SystemVerilog,RISC-cpu,60,0,2023-12-24 07:22:56+00:00,[],None
457,https://github.com/AYYAZmayo/SystemVerilog_Verification_Projects.git,2023-12-28 12:01:31+00:00,,0,AYYAZmayo/SystemVerilog_Verification_Projects,736621319,SystemVerilog,SystemVerilog_Verification_Projects,1778,0,2023-12-29 17:20:12+00:00,[],None
458,https://github.com/sieuvippro123/uvm_base_lab.git,2024-01-25 03:01:28+00:00,,0,sieuvippro123/uvm_base_lab,747985725,SystemVerilog,uvm_base_lab,164,0,2024-01-25 07:25:11+00:00,[],None
459,https://github.com/hyun-woo-oh/DL-Sort-Generator.git,2024-01-20 12:02:05+00:00,Chisel-based generator of the dual-layer hardware sorter (DL-Sort).,0,hyun-woo-oh/DL-Sort-Generator,745872109,SystemVerilog,DL-Sort-Generator,75,0,2024-01-20 12:18:06+00:00,[],https://api.github.com/licenses/gpl-3.0
460,https://github.com/fsaltunyuva/CMPE361-LAB4.git,2023-12-16 14:39:17+00:00,SystemVerilog Lab for the CMPE361 (Computer Organization) Course.,0,fsaltunyuva/CMPE361-LAB4,732396341,SystemVerilog,CMPE361-LAB4,10,0,2024-03-24 10:57:54+00:00,[],None
461,https://github.com/LiamSnow/ECE3829-Lab2.git,2024-01-25 18:00:47+00:00,,0,LiamSnow/ECE3829-Lab2,748311455,SystemVerilog,ECE3829-Lab2,6145,0,2024-03-27 21:07:34+00:00,[],None
462,https://github.com/Vietngo2748/RICS-V-simple-core.git,2024-01-15 07:16:05+00:00,5 stage pipeline RISC-V ,0,Vietngo2748/RICS-V-simple-core,743410482,SystemVerilog,RICS-V-simple-core,13306,0,2024-01-15 07:21:21+00:00,[],None
463,https://github.com/r06942072/study_sv.git,2024-01-12 02:28:37+00:00,,0,r06942072/study_sv,742226787,SystemVerilog,study_sv,40528,0,2024-01-12 02:35:01+00:00,[],None
464,https://github.com/timingwalker/sophon.git,2023-12-27 06:37:57+00:00,Sophon is a time-repeatable and low-latency architecture based on RISC-V,0,timingwalker/sophon,736162315,SystemVerilog,sophon,2223,0,2023-12-27 08:20:11+00:00,[],https://api.github.com/licenses/apache-2.0
465,https://github.com/sakhan-1111/IEEE754-Adder.git,2023-12-19 23:42:12+00:00,System Verilog code for IEEE754 added.,0,sakhan-1111/IEEE754-Adder,733702023,SystemVerilog,IEEE754-Adder,13,0,2023-12-19 23:42:47+00:00,[],https://api.github.com/licenses/gpl-3.0
466,https://github.com/ksx2/verilogTask1.git,2023-12-21 08:36:53+00:00,,0,ksx2/verilogTask1,734255867,SystemVerilog,verilogTask1,11201,0,2023-12-21 09:16:27+00:00,[],None
467,https://github.com/Raghubabu7993/constraints.git,2023-12-21 06:55:05+00:00,,0,Raghubabu7993/constraints,734223033,SystemVerilog,constraints,7,0,2023-12-21 06:56:54+00:00,[],None
468,https://github.com/balaji-vbr/Verification-of-AXI4-Lite-Bus-Protocol-using-System-Verilog-Assertions.git,2023-12-21 00:00:32+00:00,,0,balaji-vbr/Verification-of-AXI4-Lite-Bus-Protocol-using-System-Verilog-Assertions,734127901,SystemVerilog,Verification-of-AXI4-Lite-Bus-Protocol-using-System-Verilog-Assertions,1123,0,2023-12-21 00:10:10+00:00,[],None
469,https://github.com/panavio/Verilog-and-RISC-V-Assembly.git,2024-01-14 06:39:22+00:00,For ECE253: Computer and digital systems (not organised!!),0,panavio/Verilog-and-RISC-V-Assembly,743047447,SystemVerilog,Verilog-and-RISC-V-Assembly,162,0,2024-01-14 06:39:50+00:00,[],None
470,https://github.com/VirusCollector/Mips-Pipeline50.git,2024-01-16 15:33:35+00:00,计算机系统实现I实验存档,0,VirusCollector/Mips-Pipeline50,744082081,SystemVerilog,Mips-Pipeline50,340,0,2024-01-16 15:36:52+00:00,[],None
471,https://github.com/anil-yesil/UART.git,2024-01-11 11:37:15+00:00,"UART Hardware Communication Protocol on Basys3 boards. Full-duplex, 8-bit data, 2-stop bits. Implements stages for transmitter, receiver, memory, and automatic transfer. Connect two boards for bidirectional communication. Project report includes detailed design and schematics.",0,anil-yesil/UART,741919267,SystemVerilog,UART,10,0,2024-01-11 11:43:55+00:00,[],None
472,https://github.com/GaalElbaz/countToThree.git,2024-01-10 12:45:14+00:00,"Implementing a count to 3 with 2 JK flip-flops involves using sequential logic to toggle states. The first flip-flop divides the input frequency by 2, and the second one divides it further, creating a 2-bit counter with states 00, 01, 10, and 11.",0,GaalElbaz/countToThree,741458162,SystemVerilog,countToThree,60,0,2024-01-10 12:50:29+00:00,[],None
473,https://github.com/nehawaghmore/Layered-Testbench-for-Full-Adder.git,2024-01-10 14:19:16+00:00,,0,nehawaghmore/Layered-Testbench-for-Full-Adder,741498214,SystemVerilog,Layered-Testbench-for-Full-Adder,12,0,2024-01-10 14:49:19+00:00,[],None
474,https://github.com/rishabh4749/DFF_Asynchronous_Reset_2.git,2023-12-29 07:26:41+00:00,,0,rishabh4749/DFF_Asynchronous_Reset_2,736895668,SystemVerilog,DFF_Asynchronous_Reset_2,4,0,2024-01-13 14:42:59+00:00,[],None
475,https://github.com/WilliamLi97/hw.git,2024-01-09 18:10:15+00:00,Collection of my own RTL implementations of various hardware structures,0,WilliamLi97/hw,741112551,SystemVerilog,hw,67,0,2024-01-11 22:30:29+00:00,[],None
476,https://github.com/RohiniNatarajan/git_sample2.git,2024-01-18 12:40:33+00:00,,0,RohiniNatarajan/git_sample2,744997159,SystemVerilog,git_sample2,2,0,2024-01-18 12:53:53+00:00,[],None
477,https://github.com/atfox272/SPI_peripheral.git,2024-01-04 10:47:45+00:00,Implement SPI peripheral by HDL (Verilog),0,atfox272/SPI_peripheral,738916061,SystemVerilog,SPI_peripheral,265,0,2024-01-04 10:49:45+00:00,[],None
478,https://github.com/ckf104/rvv-core.git,2024-01-07 12:35:37+00:00,,0,ckf104/rvv-core,740067485,SystemVerilog,rvv-core,127,0,2024-01-07 13:22:15+00:00,[],None
479,https://github.com/nick-pilgrim/Finite-State-Machine.git,2023-12-22 20:34:12+00:00,"//This File contains the physical validation module, the module that creates the FSM, and the testbench for the FSM, and the debouncer",0,nick-pilgrim/Finite-State-Machine,734857527,SystemVerilog,Finite-State-Machine,2,0,2023-12-22 20:35:40+00:00,[],None
480,https://github.com/yourealfun/apb_demux_v2.git,2023-12-25 19:15:43+00:00,,0,yourealfun/apb_demux_v2,735673586,SystemVerilog,apb_demux_v2,486,0,2023-12-25 19:17:16+00:00,[],None
481,https://github.com/kmjstr35/bullsAndCows.git,2023-12-26 06:33:04+00:00,,0,kmjstr35/bullsAndCows,735811850,SystemVerilog,bullsAndCows,43,0,2023-12-26 06:34:47+00:00,[],None
482,https://github.com/Rahma-Aly/ALU-UVM.git,2023-12-17 03:59:41+00:00,UVM based verification of a simple ALU design,0,Rahma-Aly/ALU-UVM,732554068,SystemVerilog,ALU-UVM,8,0,2023-12-17 04:02:07+00:00,[],None
483,https://github.com/monistode/ISA_register.git,2023-12-23 13:42:21+00:00,,0,monistode/ISA_register,735050468,SystemVerilog,ISA_register,1862,0,2023-12-23 13:42:54+00:00,[],None
484,https://github.com/zheleznovkiril/DZ_verilog.git,2023-12-27 16:16:52+00:00,,0,zheleznovkiril/DZ_verilog,736335210,SystemVerilog,DZ_verilog,1618,0,2023-12-27 16:30:32+00:00,[],None
485,https://github.com/jfu4/CPEN-211-Reduced-Instruction-Set-Computer-.git,2023-12-27 23:49:41+00:00,,0,jfu4/CPEN-211-Reduced-Instruction-Set-Computer-,736446168,SystemVerilog,CPEN-211-Reduced-Instruction-Set-Computer-,19,0,2023-12-27 23:51:20+00:00,[],None
486,https://github.com/kburp/comparc-2023.git,2024-01-03 07:32:05+00:00,,0,kburp/comparc-2023,738421632,SystemVerilog,comparc-2023,144,0,2024-01-03 07:36:05+00:00,[],None
487,https://github.com/vakeesank99/axis_sum_on_7_segment.git,2023-12-30 17:12:20+00:00,,0,vakeesank99/axis_sum_on_7_segment,737339158,SystemVerilog,axis_sum_on_7_segment,5,0,2023-12-30 17:25:59+00:00,[],None
488,https://github.com/MoritMorit/jikken_yon-.git,2023-12-25 10:17:21+00:00,helpme,0,MoritMorit/jikken_yon-,735549924,SystemVerilog,jikken_yon-,65,0,2023-12-25 10:53:11+00:00,[],None
489,https://github.com/SKrishnaPrasad-10/Design-of-Round-Robin-Arbiter-in-System-Verilog.git,2024-01-08 08:56:15+00:00,,0,SKrishnaPrasad-10/Design-of-Round-Robin-Arbiter-in-System-Verilog,740392882,SystemVerilog,Design-of-Round-Robin-Arbiter-in-System-Verilog,2,0,2024-01-08 08:56:43+00:00,[],None
490,https://github.com/GaalElbaz/mux2-1.git,2024-01-09 18:30:49+00:00,"A 2-to-1 multiplexer (mux) selects one of two inputs (A or B) based on a control signal (SEL). The output is the selected input: if SEL is true, output is B; otherwise, it's A. Used for data routing in digital systems.",0,GaalElbaz/mux2-1,741120456,SystemVerilog,mux2-1,25,0,2024-01-09 18:35:02+00:00,[],None
491,https://github.com/ArcaneWizard/CSE_371_Labs.git,2024-01-23 01:52:18+00:00,Verilog Hell,0,ArcaneWizard/CSE_371_Labs,746967330,SystemVerilog,CSE_371_Labs,48479,0,2024-01-23 02:08:28+00:00,[],None
492,https://github.com/Smruti-2001/Design-and-verify-UART-Protocol-using-Verilog-and-System-Verilog-respectively.git,2024-01-25 12:31:59+00:00,,0,Smruti-2001/Design-and-verify-UART-Protocol-using-Verilog-and-System-Verilog-respectively,748172811,SystemVerilog,Design-and-verify-UART-Protocol-using-Verilog-and-System-Verilog-respectively,4,0,2024-01-25 12:34:29+00:00,[],None
493,https://github.com/orszoooo/RISCVcpu.git,2024-01-25 19:20:41+00:00,,0,orszoooo/RISCVcpu,748343260,SystemVerilog,RISCVcpu,7,0,2024-01-25 19:20:49+00:00,[],None
494,https://github.com/kxtieb/Lab0.git,2024-01-24 22:22:53+00:00,,0,kxtieb/Lab0,747916212,SystemVerilog,Lab0,21142,0,2024-01-29 19:42:23+00:00,[],https://api.github.com/licenses/mit
495,https://github.com/epfl-vlsc/parendi-paperspace-demo.git,2024-01-18 17:32:56+00:00,Parendi's demo on Paperspace IPUs,0,epfl-vlsc/parendi-paperspace-demo,745125078,SystemVerilog,parendi-paperspace-demo,34880,0,2024-01-18 17:33:29+00:00,[],None
496,https://github.com/ImtiyazAli1997/system_verilog.git,2023-12-26 02:00:25+00:00,,0,ImtiyazAli1997/system_verilog,735747996,SystemVerilog,system_verilog,88,0,2023-12-26 02:01:56+00:00,[],None
497,https://github.com/oscc-ip/i2s.git,2023-12-31 02:03:46+00:00,An APB4-based I2S Controller,0,oscc-ip/i2s,737429262,SystemVerilog,i2s,47,0,2024-01-25 14:00:23+00:00,[],https://api.github.com/licenses/mulanpsl-2.0
498,https://github.com/cimonik/CPU.git,2024-01-03 11:10:42+00:00,,0,cimonik/CPU,738496985,SystemVerilog,CPU,44,0,2024-01-03 11:12:24+00:00,[],None
499,https://github.com/AliMaher15/UART-UVM.git,2023-12-18 13:12:37+00:00,UVM environment using SV for the famous protocol UART,0,AliMaher15/UART-UVM,733054693,SystemVerilog,UART-UVM,3096,0,2023-12-22 22:11:07+00:00,[],None
500,https://github.com/BrinaDancer/MIPS2023PACE.git,2024-01-03 18:35:50+00:00,Design and Implementation 5-Stage Pipeline 32-bit MIPS Processor   PACE University Spring 2023 ,0,BrinaDancer/MIPS2023PACE,738659631,SystemVerilog,MIPS2023PACE,718,0,2024-01-03 18:40:15+00:00,[],None
501,https://github.com/cengizakr/convolution-module.git,2023-12-25 21:06:32+00:00,SystemVerilog module that takes convolution,0,cengizakr/convolution-module,735692936,SystemVerilog,convolution-module,411,0,2023-12-25 21:10:33+00:00,[],None
502,https://github.com/flaviens/yosys-b1.git,2024-01-23 09:43:28+00:00,,0,flaviens/yosys-b1,747113484,SystemVerilog,yosys-b1,1,0,2024-01-23 09:43:51+00:00,[],None
503,https://github.com/simervir/UVM.git,2024-01-24 21:09:39+00:00,,0,simervir/UVM,747893922,SystemVerilog,UVM,11,0,2024-01-24 21:28:52+00:00,[],None
504,https://github.com/Ferdziu10/UEC-Stopwatch.git,2024-01-25 16:59:37+00:00,,0,Ferdziu10/UEC-Stopwatch,748287133,SystemVerilog,UEC-Stopwatch,61,0,2024-01-25 17:08:11+00:00,[],None
505,https://github.com/PeterDessev/ECEN-2350-Final-Project-SystemVerilog-CPU.git,2023-12-18 01:50:04+00:00,BP-1 8 bit Microprocessor written for ECEN 2350,0,PeterDessev/ECEN-2350-Final-Project-SystemVerilog-CPU,732847201,SystemVerilog,ECEN-2350-Final-Project-SystemVerilog-CPU,1435,0,2024-01-30 04:14:15+00:00,"['mips', 'processor', 'systemveri']",None
506,https://github.com/saher-i/MY_SV_Codes.git,2023-12-28 02:28:07+00:00,,0,saher-i/MY_SV_Codes,736474346,SystemVerilog,MY_SV_Codes,616,0,2023-12-28 02:57:41+00:00,[],None
507,https://github.com/padhu125/Dual-channel-sinusoidal-triangular-sawtooth-square-and-dc-waveform-generator.git,2023-12-30 02:17:55+00:00,"The goal of this project is to implement a dual-channel waveform generator, capable of being controlled and configured from the processor subsystem over an AXI4-lite interface.",0,padhu125/Dual-channel-sinusoidal-triangular-sawtooth-square-and-dc-waveform-generator,737155882,SystemVerilog,Dual-channel-sinusoidal-triangular-sawtooth-square-and-dc-waveform-generator,2771,0,2023-12-30 02:22:47+00:00,[],https://api.github.com/licenses/mit
508,https://github.com/hh2150597/CA_Project_7th.git,2023-12-30 16:54:33+00:00,,0,hh2150597/CA_Project_7th,737334706,SystemVerilog,CA_Project_7th,325,0,2023-12-30 16:56:49+00:00,[],None
509,https://github.com/HareemArsh/CA-Term-Project.git,2023-12-30 15:01:04+00:00,3-Stage Pipelined Processor with CSR Support,0,HareemArsh/CA-Term-Project,737306779,SystemVerilog,CA-Term-Project,184,0,2023-12-30 15:17:31+00:00,"['3-stage-pipelined-riscv', 'csr', 'pipeline']",None
510,https://github.com/Shaff234/3-Stage-Pipeline-Architecture.git,2023-12-30 18:21:00+00:00,"A compact 3-stage pipelined processor implemented in System Verilog. Features modular design, RISC-V instruction support, and easy simulation with Verilog simulators. Explore the code in the src directory.",0,Shaff234/3-Stage-Pipeline-Architecture,737355028,SystemVerilog,3-Stage-Pipeline-Architecture,114,0,2023-12-30 18:25:13+00:00,[],None
511,https://github.com/Vietngo2748/RAM-in-3-data-type.git,2024-01-03 03:09:24+00:00,"My Ram can select between byte, word or doubleword type ",0,Vietngo2748/RAM-in-3-data-type,738352884,SystemVerilog,RAM-in-3-data-type,10940,0,2024-01-03 03:13:04+00:00,[],None
512,https://github.com/ChrisAtUW/FPGA_minigame.git,2024-01-04 00:36:22+00:00,Final Project for Digital Circuits and Systems class at UW,0,ChrisAtUW/FPGA_minigame,738748247,SystemVerilog,FPGA_minigame,20,0,2024-01-04 03:07:47+00:00,[],None
513,https://github.com/Ayesha-WEB-DEV/3-stage_pipelining.git,2023-12-30 16:28:38+00:00,,0,Ayesha-WEB-DEV/3-stage_pipelining,737328201,SystemVerilog,3-stage_pipelining,739,0,2024-01-04 03:28:33+00:00,[],None
514,https://github.com/GaalElbaz/FullAdder.git,2024-01-09 19:08:25+00:00,"A full adder is a binary circuit with 3 inputs (A, B, Cin) and 2 outputs (Sum, Cout). It includes a carry input, handling carry from prior stages. The truth table shows its inclusive operation. Logic equations for Sum (S) and carry-out (Cout) involve XOR and AND gates. Crucial for multi-bit addition, it's a key component in digital systems.",0,GaalElbaz/FullAdder,741133928,SystemVerilog,FullAdder,32,0,2024-01-09 19:10:36+00:00,[],None
515,https://github.com/arruk/MIPS_multicycle.git,2023-12-24 14:53:16+00:00,,0,arruk/MIPS_multicycle,735339451,SystemVerilog,MIPS_multicycle,6,0,2024-01-09 21:45:33+00:00,[],None
516,https://github.com/bilibidum/svdarkeden.git,2024-01-08 18:22:28+00:00,"O svDarkeden é um gerenciador de serviços para o gameserver do jogo Darkeden. Este projeto permite aos ADM visualizar o status, iniciar o servidor e parar o servidor do jogo de maneira rápida e segura.",0,bilibidum/svdarkeden,740626748,SystemVerilog,svdarkeden,112,0,2024-01-11 00:52:08+00:00,[],https://api.github.com/licenses/gpl-3.0
517,https://github.com/simran9293/32-bit-MIPS-Processor.git,2024-01-11 15:41:11+00:00,Design and Simulation of 32-bit MIPS Processor,0,simran9293/32-bit-MIPS-Processor,742019354,SystemVerilog,32-bit-MIPS-Processor,7,0,2024-01-11 15:43:34+00:00,[],None
518,https://github.com/Ianmurph91/distributed_ram.git,2024-01-12 14:42:31+00:00,Dual-port distributed RAM in VHDL,0,Ianmurph91/distributed_ram,742465718,SystemVerilog,distributed_ram,3,0,2024-01-12 14:46:33+00:00,"['fpga', 'vhdl']",None
519,https://github.com/JackSabine/xentry-cache.git,2023-12-29 04:21:01+00:00,,0,JackSabine/xentry-cache,736852792,SystemVerilog,xentry-cache,75,0,2023-12-29 04:21:59+00:00,[],None
520,https://github.com/rishabh4749/D_flip_flop.git,2023-12-28 17:45:43+00:00,,0,rishabh4749/D_flip_flop,736727847,SystemVerilog,D_flip_flop,4,0,2024-01-13 14:35:25+00:00,[],None
521,https://github.com/rishabh4749/Mux_Two_DFFs.git,2024-01-13 06:37:02+00:00,,0,rishabh4749/Mux_Two_DFFs,742717443,SystemVerilog,Mux_Two_DFFs,4,0,2024-01-13 15:04:53+00:00,[],None
522,https://github.com/xayin212/riscv_processor.git,2024-01-05 04:08:34+00:00,SystemVerilog code to simulate the hardware of a single-cycle processor and a pipelined five-stage processor,0,xayin212/riscv_processor,739225738,SystemVerilog,riscv_processor,55,0,2024-01-13 02:20:19+00:00,[],None
523,https://github.com/AashiSrivastava/UART16550_TX-RX_LOGIC.git,2024-01-14 10:13:15+00:00,"The Universal Asynchronous Receiver-Transmitter (UART) 16550 is a widely used serial communication interface known for its simplicity and versatility. This report provides an overview of the UART 16550's TX and RX logic, highlighting key features, including 16-bit oversampling and the Line Control Register (LCR).",0,AashiSrivastava/UART16550_TX-RX_LOGIC,743095524,SystemVerilog,UART16550_TX-RX_LOGIC,175,0,2024-01-14 10:16:15+00:00,[],None
524,https://github.com/AliMaher15/spi-uvm.git,2024-01-02 18:50:39+00:00,UVM environment using SV for the famous protocol SPI,0,AliMaher15/spi-uvm,738236193,SystemVerilog,spi-uvm,980,0,2024-01-02 18:51:53+00:00,[],None
525,https://github.com/tom21487/reg_ctrl.git,2023-12-22 21:56:31+00:00,SystemVerilog testbench. Constraint random verification. Self checking testbench. Based on: https://chipverify.com/systemverilog/systemverilog-testbench-example-1,0,tom21487/reg_ctrl,734874112,SystemVerilog,reg_ctrl,160,0,2023-12-25 07:35:10+00:00,[],None
526,https://github.com/MahantaTalakal/Carry-Look-Ahead-Adder_32bit.git,2024-01-15 03:13:54+00:00,,0,MahantaTalakal/Carry-Look-Ahead-Adder_32bit,743350620,SystemVerilog,Carry-Look-Ahead-Adder_32bit,2,0,2024-01-15 03:15:17+00:00,[],None
527,https://github.com/attar8/Fifo-module-using-System-verilog.git,2023-12-18 07:37:30+00:00,,0,attar8/Fifo-module-using-System-verilog,732934432,SystemVerilog,Fifo-module-using-System-verilog,17,0,2023-12-18 07:39:10+00:00,[],None
528,https://github.com/Ammara-Noor/five-stage-pipelined-proc-riscv.git,2023-12-22 06:43:25+00:00,,0,Ammara-Noor/five-stage-pipelined-proc-riscv,734619040,SystemVerilog,five-stage-pipelined-proc-riscv,102,0,2023-12-22 06:49:10+00:00,[],None
529,https://github.com/mathewwu11/Baccarat-Engine.git,2023-12-22 04:27:19+00:00,Baccarat Engine,0,mathewwu11/Baccarat-Engine,734587116,SystemVerilog,Baccarat-Engine,8,0,2023-12-22 09:33:10+00:00,['systemverilog'],None
530,https://github.com/chaoqun-liang/idma_axis.git,2023-12-25 23:50:58+00:00,,0,chaoqun-liang/idma_axis,735716350,SystemVerilog,idma_axis,5141,0,2023-12-25 23:52:05+00:00,[],
531,https://github.com/Gayan0303/oddevenfinder.git,2024-01-18 11:59:14+00:00,,0,Gayan0303/oddevenfinder,744980887,SystemVerilog,oddevenfinder,2,0,2024-01-18 11:59:49+00:00,[],None
532,https://github.com/rishabh4749/Dual_Edge_Detector.git,2024-01-19 10:38:51+00:00,,0,rishabh4749/Dual_Edge_Detector,745439595,SystemVerilog,Dual_Edge_Detector,1,0,2024-01-19 10:40:07+00:00,[],None
533,https://github.com/dounsnight/CTRL_GATE.git,2024-01-18 12:09:40+00:00,,0,dounsnight/CTRL_GATE,744985099,SystemVerilog,CTRL_GATE,6,0,2024-01-18 12:33:12+00:00,[],None
534,https://github.com/Hamzaweb49/seqmultiplier.git,2023-12-25 10:13:59+00:00,16x16 Sequential Multiplier,0,Hamzaweb49/seqmultiplier,735549186,SystemVerilog,seqmultiplier,35,0,2023-12-25 10:24:26+00:00,[],None
535,https://github.com/casager/HSCA.git,2024-01-23 18:57:18+00:00,,0,casager/HSCA,747351349,SystemVerilog,HSCA,7630,0,2024-01-23 19:13:22+00:00,[],None
536,https://github.com/benjicruz/IEEE-at-UCLA-DAV.git,2024-01-19 00:23:59+00:00,,0,benjicruz/IEEE-at-UCLA-DAV,745259598,SystemVerilog,IEEE-at-UCLA-DAV,21788,0,2024-01-24 03:54:39+00:00,[],None
537,https://github.com/attar8/Five-Stage-Mips-Processor-Verification.git,2023-12-17 09:38:04+00:00,,0,attar8/Five-Stage-Mips-Processor-Verification,732618327,SystemVerilog,Five-Stage-Mips-Processor-Verification,3786,0,2023-12-17 09:42:20+00:00,[],None
538,https://github.com/csianturi/PokemonSoC.git,2023-12-16 22:03:48+00:00,Pokemon Battle on SoC,0,csianturi/PokemonSoC,732501243,SystemVerilog,PokemonSoC,967,0,2023-12-16 22:20:19+00:00,[],None
539,https://github.com/dreampursuitLX/GWAS-FPGA.git,2023-12-20 05:52:22+00:00,,0,dreampursuitLX/GWAS-FPGA,733785087,SystemVerilog,GWAS-FPGA,1223,0,2023-12-20 06:14:08+00:00,[],None
540,https://github.com/esynr3z/verilator-uvm-perf.git,2023-12-22 11:30:26+00:00,,0,esynr3z/verilator-uvm-perf,734702339,SystemVerilog,verilator-uvm-perf,10,0,2023-12-22 11:53:04+00:00,[],None
541,https://github.com/cuongcuong1220/SystemVerilog.git,2023-12-24 05:34:41+00:00,Coverage_Mux4-1,0,cuongcuong1220/SystemVerilog,735222583,SystemVerilog,SystemVerilog,5794,0,2023-12-24 05:36:10+00:00,[],None
542,https://github.com/Katerinalex001/laba_2_final.git,2023-12-28 05:20:50+00:00,,0,Katerinalex001/laba_2_final,736508999,SystemVerilog,laba_2_final,6,0,2023-12-28 05:26:42+00:00,[],None
543,https://github.com/AwaisDar1/Three-Staged-Pipeline-Processor-RISC-V.git,2023-12-23 20:06:07+00:00,RISCV,0,AwaisDar1/Three-Staged-Pipeline-Processor-RISC-V,735140210,SystemVerilog,Three-Staged-Pipeline-Processor-RISC-V,672,0,2024-01-01 07:44:13+00:00,[],None
544,https://github.com/gaganng/rtl_blocks.git,2024-01-01 20:56:31+00:00,,0,gaganng/rtl_blocks,737883779,SystemVerilog,rtl_blocks,1,0,2024-01-01 21:06:22+00:00,[],None
545,https://github.com/Abdullah7861/Three-Stage-Pipelined-Processor.git,2023-12-30 14:59:55+00:00,This repository contains System Verilog code for Risc-V based three staged 32 bit pipelined processor with csr Implemetation.,0,Abdullah7861/Three-Stage-Pipelined-Processor,737306504,SystemVerilog,Three-Stage-Pipelined-Processor,141,0,2024-01-03 22:39:29+00:00,[],None
546,https://github.com/Sanjay4477/32-bit-Vedic-Multiplier-using-Carry-Save-Adder.git,2024-01-07 14:24:46+00:00,,0,Sanjay4477/32-bit-Vedic-Multiplier-using-Carry-Save-Adder,740099185,SystemVerilog,32-bit-Vedic-Multiplier-using-Carry-Save-Adder,1,0,2024-01-07 14:32:11+00:00,[],None
547,https://github.com/mahmedadawy2013/UVM_LFSR.git,2024-01-06 00:49:39+00:00,,0,mahmedadawy2013/UVM_LFSR,739597466,SystemVerilog,UVM_LFSR,30,0,2024-01-06 00:50:43+00:00,[],None
548,https://github.com/SKrishnaPrasad-10/UVM_Verification_of_APB_Protocol.git,2024-01-06 23:55:11+00:00,,0,SKrishnaPrasad-10/UVM_Verification_of_APB_Protocol,739918575,SystemVerilog,UVM_Verification_of_APB_Protocol,16,0,2024-01-06 23:56:17+00:00,[],None
549,https://github.com/tiagosr/gw2_hdmi_base.git,2024-01-08 23:49:35+00:00,,0,tiagosr/gw2_hdmi_base,740725056,SystemVerilog,gw2_hdmi_base,27,0,2024-01-08 23:49:41+00:00,[],None
550,https://github.com/shohschulz/64-Bit-Pipelined-ARM-CPU.git,2024-01-09 00:31:50+00:00,,0,shohschulz/64-Bit-Pipelined-ARM-CPU,740734231,SystemVerilog,64-Bit-Pipelined-ARM-CPU,31,0,2024-01-09 00:38:01+00:00,[],None
551,https://github.com/MaxCharlington/wasm-future.git,2024-01-11 09:45:19+00:00,,0,MaxCharlington/wasm-future,741875650,SystemVerilog,wasm-future,38,0,2024-01-11 09:45:47+00:00,[],None
552,https://github.com/BillyScreezo/Gold-transmitter.git,2024-01-11 11:15:57+00:00,Customizable gold code transmitter,0,BillyScreezo/Gold-transmitter,741911115,SystemVerilog,Gold-transmitter,18,0,2024-01-11 11:16:03+00:00,[],https://api.github.com/licenses/gpl-3.0
553,https://github.com/MAHANTHADEEKSHA-SB/AHB-UVC.git,2024-01-11 17:48:31+00:00,,0,MAHANTHADEEKSHA-SB/AHB-UVC,742071197,SystemVerilog,AHB-UVC,28,0,2024-01-11 18:15:49+00:00,[],https://api.github.com/licenses/apache-2.0
554,https://github.com/rishabh4749/Multiple_DFFs.git,2023-12-28 18:34:56+00:00,,0,rishabh4749/Multiple_DFFs,736741157,SystemVerilog,Multiple_DFFs,4,0,2024-01-13 14:37:05+00:00,[],None
555,https://github.com/rishabh4749/DFF_Synchronous_Reset.git,2023-12-28 18:53:59+00:00,,0,rishabh4749/DFF_Synchronous_Reset,736746189,SystemVerilog,DFF_Synchronous_Reset,4,0,2024-01-13 14:38:11+00:00,[],None
556,https://github.com/rishabh4749/DFF_Byte_Enable.git,2023-12-29 05:17:17+00:00,,0,rishabh4749/DFF_Byte_Enable,736864063,SystemVerilog,DFF_Byte_Enable,4,0,2024-01-13 14:41:04+00:00,[],None
557,https://github.com/MahmoudMohamed9988/UVM_of_ALU.git,2024-01-13 16:52:37+00:00,Implement a complete UVM testbench and design for ALU,0,MahmoudMohamed9988/UVM_of_ALU,742883776,SystemVerilog,UVM_of_ALU,88,0,2024-01-13 17:22:16+00:00,[],None
558,https://github.com/ananya343B/D_flipflop_layeredtb.git,2024-01-16 16:54:14+00:00,,0,ananya343B/D_flipflop_layeredtb,744118498,SystemVerilog,D_flipflop_layeredtb,10,0,2024-01-16 17:01:49+00:00,[],None
559,https://github.com/kietuan/DATKLL.git,2024-01-10 14:42:28+00:00,,0,kietuan/DATKLL,741508454,SystemVerilog,DATKLL,166225,0,2024-01-10 15:46:33+00:00,[],https://api.github.com/licenses/mit
560,https://github.com/Jashanjyot/Hardware-Image_Decompressor.git,2024-01-19 15:16:07+00:00,,0,Jashanjyot/Hardware-Image_Decompressor,745546599,SystemVerilog,Hardware-Image_Decompressor,1492,0,2024-01-19 15:20:25+00:00,[],None
561,https://github.com/ruwayd99/FormalVerification_for_Counter.git,2023-12-24 23:01:32+00:00,,0,ruwayd99/FormalVerification_for_Counter,735432219,SystemVerilog,FormalVerification_for_Counter,6,0,2023-12-24 23:13:19+00:00,[],None
562,https://github.com/MahmoudMohamed9988/FIFO_SV_TB.git,2024-01-13 17:41:10+00:00,Implement a complete SystemVerilog testbench and design for FIFO,0,MahmoudMohamed9988/FIFO_SV_TB,742897763,SystemVerilog,FIFO_SV_TB,13,0,2024-01-13 17:43:09+00:00,[],None
563,https://github.com/cdhmanning/FLD119x-src.git,2024-01-22 07:02:32+00:00,SwerVolf changes for LFD119x,0,cdhmanning/FLD119x-src,746520111,SystemVerilog,FLD119x-src,2632,0,2024-01-22 07:05:20+00:00,[],None
564,https://github.com/flaviens/cxxrtl-b4.git,2024-01-21 12:56:22+00:00,,0,flaviens/cxxrtl-b4,746225374,SystemVerilog,cxxrtl-b4,1,0,2024-01-21 12:59:05+00:00,[],None
565,https://github.com/Rubayet13/Fifo_systemverilog.git,2024-01-08 12:30:23+00:00,,0,Rubayet13/Fifo_systemverilog,740477010,SystemVerilog,Fifo_systemverilog,104,0,2024-02-03 17:17:53+00:00,[],None
566,https://github.com/daisukex/sc-spilite.git,2024-01-08 02:22:56+00:00,Space Cubics SPI-Lite Core is a master core for the Serial Peripheral Interface (SPI),0,daisukex/sc-spilite,740277750,SystemVerilog,sc-spilite,45,0,2024-01-08 02:26:19+00:00,[],https://api.github.com/licenses/apache-2.0
567,https://github.com/dav3floyd/Traffic-Light-Controller.git,2024-01-24 18:27:30+00:00,,0,dav3floyd/Traffic-Light-Controller,747835448,SystemVerilog,Traffic-Light-Controller,7,0,2024-01-24 18:34:56+00:00,[],None
568,https://github.com/CepbluKot/fpga_labs.git,2024-01-25 22:20:22+00:00,,0,CepbluKot/fpga_labs,748402220,SystemVerilog,fpga_labs,7,0,2024-01-26 09:56:06+00:00,[],None
569,https://github.com/cn9826/RV32I.git,2024-01-14 18:50:41+00:00,,0,cn9826/RV32I,743242949,SystemVerilog,RV32I,28,0,2024-01-14 19:04:26+00:00,[],None
570,https://github.com/BrunaMatias/SistemasDigitais.git,2023-12-17 10:28:54+00:00,,0,BrunaMatias/SistemasDigitais,732630039,SystemVerilog,SistemasDigitais,18,0,2024-02-13 00:41:46+00:00,[],None
571,https://github.com/Karthikdhondi/SystemVerilog.git,2023-12-24 09:39:36+00:00,"Developed a Complete System Verilog Test Bench with transactions, generator, driver, interfaces, monitor and scoreboard for the given GCD RTL.",0,Karthikdhondi/SystemVerilog,735268460,SystemVerilog,SystemVerilog,27,0,2024-02-19 11:03:55+00:00,[],None
572,https://github.com/carlabferreira/ISL-UFMG.git,2023-12-29 22:20:10+00:00,,0,carlabferreira/ISL-UFMG,737122340,SystemVerilog,ISL-UFMG,2574,0,2024-03-17 00:18:19+00:00,[],None
573,https://github.com/dingandrew/hdc_sw.git,2024-01-15 19:17:13+00:00,,0,dingandrew/hdc_sw,743688735,SystemVerilog,hdc_sw,3225,0,2024-02-04 05:28:55+00:00,[],None
574,https://github.com/henrybliu/bitcoin-hash-miner.git,2024-01-17 03:07:33+00:00,,0,henrybliu/bitcoin-hash-miner,744310326,SystemVerilog,bitcoin-hash-miner,7669,0,2024-03-07 05:22:08+00:00,[],None
575,https://github.com/aGhandhii/floating_point_unit.git,2024-01-11 04:18:48+00:00,A simple Floating-Point arithmetic unit - implemented in SystemVerilog,0,aGhandhii/floating_point_unit,741767570,SystemVerilog,floating_point_unit,311,0,2024-01-11 04:41:44+00:00,"['digital-design', 'fpu', 'systemverilog']",None
576,https://github.com/Teimir/UART_OKBE.git,2024-01-18 19:36:11+00:00,,0,Teimir/UART_OKBE,745174594,SystemVerilog,UART_OKBE,148,0,2024-01-18 20:51:08+00:00,[],None
577,https://github.com/vikrantIIITD2024/Elevator-Controller-using-Verilog.git,2024-01-24 06:44:16+00:00,,0,vikrantIIITD2024/Elevator-Controller-using-Verilog,747550346,SystemVerilog,Elevator-Controller-using-Verilog,7,0,2024-01-24 06:45:17+00:00,[],None
